[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.0","content-config-digest","4e715b3916c01e4c","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","docs",["Map",11,12,18,19,90,91,96,97,127,128,162,163,193,194,234,235,265,266,327,328,399,400],"concept",{"id":11,"data":13,"body":14,"filePath":15,"digest":16,"deferredRender":17},{},"import Code from \"@components/Code.astro\"\n\n# üìù Amelcraft: A Kid-Friendly 2D Minecraft-Inspired Game\n\n## üîÑ Project Evolution\nThe project began as a birthday idea for a 7-year-old, inspired by the Minecraft hype but aiming for simplicity and accessibility. The concept evolved from a general 2D block-building game to a focused, responsive, cross-device experience using Phaser.js. Early discussions weighed complexity (e.g., day/night cycles, pathfinding) against the need for a fun, easy-to-play game. The design journey included debates about control schemes, building mechanics, and the choice between 2D and simulated 3D, ultimately favoring a top-down, grid-based approach for ease of use and development.\n\n## üöÄ Project Genesis & Motivation\nThe motivation was personal: to create a custom game for a child‚Äôs birthday, capturing the excitement of Minecraft in a form approachable for a young beginner. The project was inspired by the child‚Äôs fascination with Minecraft and the desire to provide a creative, interactive experience tailored to her age and skills. The goal was to foster creativity, exploration, and fun, while keeping technical and gameplay complexity low.\n\n## üöÄ Project Overview\nAmelcraft is a simple, 2D, tile-based game where players can harvest materials and place blocks in a world reminiscent of Minecraft. Designed for both desktop and mobile, it features responsive controls and adaptive camera zoom, ensuring a smooth experience across devices. The game is intended for young children, with intuitive drag-to-move controls and straightforward block placement.\n\n## üí° Core Ideas & Features\n- **2D Tile-Based World:** The game world is a grid of 48x48px tiles.\n- **Harvesting & Placing Blocks:** Players collect materials and place blocks on the grid.\n- **Drag-to-Move Controls:** Movement is controlled by dragging on the screen (touch or mouse).\n- **Responsive Design:** The game adapts to device size and orientation, with dynamic camera zoom.\n- **Simple Inventory:** Materials collected are stored and can be selected for placement.\n- **Single-File POC:** Initial proof-of-concept provided as a single HTML file for easy testing.\n\n## üß© Design Decisions & Rationale\n- **Phaser.js Chosen:** For rapid development and cross-platform support.\n- **Drag-to-Move Over Click-to-Move:** Simpler for young children, avoids pathfinding complexity.\n- **Top-Down (Horizontal) Building:** More intuitive for kids, easier to implement than vertical or 3D.\n- **Responsive Canvas & Camera Zoom:** Ensures playability on all devices, keeps sprites visible and detailed.\n- **No Day/Night Cycle:** Dropped for simplicity.\n- **Block Placement Logic:** Grid-based, with pointer-to-tile conversion for intuitive interaction.\n\n## ‚ùå Rejected Ideas & Alternatives\n- **Day/Night Cycle:** Rejected to keep the game simple.\n- **Click-to-Move with Pathfinding:** Considered but dropped due to complexity.\n- **3D or Isometric Building:** Rejected for technical and cognitive simplicity; 2D chosen.\n- **Vertical (Wall) Building:** Considered, but horizontal (ground) building selected for accessibility.\n\n## ‚öñÔ∏è Player vs. Team Focus Debate\nThe game is designed as a single-player experience, focused on individual creativity and exploration. Team or multiplayer features were not prioritized, given the target audience and scope.\n\n## üåè Personal/Inspirational Details\nThe project was inspired by a child‚Äôs birthday and her fascination with Minecraft. The design choices reflect a desire to create a fun, approachable experience tailored to her interests and abilities.\n\n## üí¨ Key Conversation Excerpts\n> ‚ÄúFor my daughter's 7th birthday I want to make her a little video game, using phaser.js...simple 2D, sprite and tilemap based game, in which she can harvest a few materials and then place blocks from these materials in the world.‚Äù\n\n> ‚ÄúI want the game to run on a desktop, as well as a mobile phone...controllable by touch/mouse click and the game screen and camera zoom level should adapt itself to the device.‚Äù\n\n> ‚ÄúFor simplicity and a smooth experience for a 7-year-old, Option 2 (drag-to-move) is best. It‚Äôs easy to implement in Phaser, and kids enjoy direct control.‚Äù\n\n> ‚ÄúFor a Minecraft-like experience and simplicity for a child, the horizontal plane (top-down) is best. It‚Äôs intuitive, easy to control, and lets your daughter ‚Äòwalk‚Äô over her creations.‚Äù\n\n## üèóÔ∏è Architecture & Structure\n- **Phaser.js Engine:** Handles rendering, input, and game logic.\n- **Responsive Canvas:** Uses Phaser‚Äôs scale manager for device adaptation.\n- **Camera Zoom Logic:** Dynamically calculates zoom based on screen size and tile size.\n- **Player Sprite:** Controlled via drag-to-move pointer events.\n- **Tile Grid:** 2D array represents the world; block placement updates the grid and renders sprites.\n- **Inventory System:** Simple array for collected materials and block selection.\n\n## üíª Code Snippets & Examples\n\n### Responsive Game Screen & Zoom\n\n\u003CCode\n  src={{ \"vanilla-ts\": {\n    'index.html': new URL('file:///docs/responsive-game-screen/index.html'),\n    'index.ts': new URL('file:///docs/responsive-game-screen/index.ts')\n  }}}\n/>\n\n### Movement and Block Placement\n\n\u003CCode\n  src={{ \"vanilla-ts\": {\n    'index.html': new URL('file:///docs/movement-and-block-placement/index.html'),\n    'index.ts': new URL('file:///docs/movement-and-block-placement/index.ts')\n  }}}\n/>\n\n### Drag to Move\n\n\u003CCode\n  src={{ \"vanilla-ts\": {\n    'index.html': new URL('file:///docs/drag-to-move/index.html'),\n    'index.ts': new URL('file:///docs/drag-to-move/index.ts')\n  }}}\n/>\n\n### Block Placement\n\n\u003CCode\n  src={{ \"vanilla-ts\": {\n    'index.html': new URL('file:///docs/block-placement/index.html'),\n    'index.ts': new URL('file:///docs/block-placement/index.ts')\n  }}}\n/>\n\n## üìö References & Inspirations\n- [Phaser.js Documentation](https://phaser.io/)\n- Minecraft (as inspiration for block-building mechanics)\n- Stardew Valley, Zelda (for top-down design ideas)\n\n## ‚ùì Open Questions & Next Steps\n- Expand inventory and block types.\n- Add harvesting mechanics and sound effects.\n- Design custom sprites and tiles.\n- Consider simple NPCs or animals for added fun.\n- Polish UI for block selection and inventory management.","../../docs/CONCEPT.mdx","59941ab0d13bcd01",true,"architecture",{"id":18,"data":20,"body":21,"filePath":22,"digest":23,"rendered":24},{},"# Architecture\n\nThis document explores multiple architectural styles for game development, as discussed in the context of a Phaser.js project. We provide an overview of each, sample implementations based on a simple tile-based game (with animation and hit detection), and a critical evaluation of their benefits and drawbacks.\n\n## Table of Contents\n\n1. Decision\n2. Alternatives\n3. Japanese Software Philosophy: Sample & Evaluation\n4. Entity-Component-System (ECS): Sample & Evaluation\n5. Hexagonal Architecture: Sample & Evaluation\n6. Model-View-Controller (MVC): Sample & Evaluation\n7. Event-Driven / Observer Pattern: Sample & Evaluation\n8. Related Documents\n\n## Decision\n\nFor Amelcraft, we will begin with the Japanese Software Philosophy (minimalist, in-scene model) to maximize simplicity, rapid prototyping, and maintainability. This approach is ideal for small, fast-evolving games and allows for quick iteration and easy refactoring.\n\nIf the game grows in complexity‚Äîsuch as adding more entities, advanced mechanics, or requiring better testability and scalability‚Äîwe will incrementally refactor toward an Entity-Component-System (ECS) or Hexagonal architecture. These styles offer greater modularity, decoupling, and long-term maintainability, but introduce more boilerplate and abstraction.\n\nThis staged approach ensures we keep development efficient and accessible in the early phases, while remaining flexible to adopt more robust architectural patterns as needed.\n\n## Alternatives\n\n| Style                        | Core Focus / Principle              | Strengths                                              | Drawbacks / When to Avoid                |\n| ---------------------------- | ----------------------------------- | ------------------------------------------------------ | ---------------------------------------- |\n| Japanese Software Philosophy | Simplicity, clarity, Kaizen         | Minimal, readable, easy to refactor, fast to prototype | Can get messy as complexity grows        |\n| Hexagonal Architecture       | Separation of concerns, testability | Decoupled, testable, flexible, scalable                | Boilerplate, overkill for small games    |\n| ECS                          | Composition over inheritance        | Highly flexible, reusable, efficient for many objects  | Verbose, harder to debug, overkill small |\n| MVC                          | UI/data/input separation            | Clear roles, easy to test UI/logic separately          | Verbose, not always natural for games    |\n| Event-Driven / Observer      | Decoupled event notification        | Flexible, extensible, easy to add features             | Can be hard to trace/debug, memory leaks |\n\n**Summary:**\n- For small, rapidly evolving games, Japanese style or MVC can be ideal.\n- For large, complex, or long-lived games, Hexagonal or ECS offer better scalability and maintainability.\n- Event-driven/Observer is best for decoupling and extensibility, but can add complexity if overused.\n\n## Japanese Software Philosophy: Sample & Evaluation\n\n- **Focus:** Code as craftsmanship, simplicity, clarity, and continuous small improvements (Kaizen).\n- **Benefits:**\n  - Highly maintainable and readable code.\n  - Minimal ceremony and abstraction; only extract when needed.\n  - Emphasizes bug prevention and immediate fixes.\n  - Evolves codebase gradually, avoiding speculative design.\n- **What it solves:**\n  - Reduces over-engineering and unnecessary complexity.\n  - Keeps codebase approachable and easy to refactor.\n\n### Sample Implementation (Minimalist, In-Scene Model)\n\n```ts\nimport Phaser from \"phaser\";\n\nexport class MainScene extends Phaser.Scene {\n  private player!: Phaser.Physics.Arcade.Sprite;\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n  private obstacles!: Phaser.Physics.Arcade.StaticGroup;\n\n  preload() {\n    this.load.spritesheet(\"player\", \"player.png\", {\n      frameWidth: 32,\n      frameHeight: 48,\n    });\n    this.load.image(\"rock\", \"rock.png\");\n  }\n\n  create() {\n    // Player sprite with physics\n    this.player = this.physics.add.sprite(100, 100, \"player\");\n    this.player.setCollideWorldBounds(true);\n\n    // Define player walking animations\n    this.anims.create({\n      key: \"walk-left\",\n      frames: this.anims.generateFrameNumbers(\"player\", { start: 9, end: 11 }),\n      frameRate: 10,\n      repeat: -1,\n    });\n    this.anims.create({\n      key: \"walk-right\",\n      frames: this.anims.generateFrameNumbers(\"player\", { start: 6, end: 8 }),\n      frameRate: 10,\n      repeat: -1,\n    });\n    this.anims.create({\n      key: \"walk-up\",\n      frames: this.anims.generateFrameNumbers(\"player\", { start: 3, end: 5 }),\n      frameRate: 10,\n      repeat: -1,\n    });\n    this.anims.create({\n      key: \"walk-down\",\n      frames: this.anims.generateFrameNumbers(\"player\", { start: 0, end: 2 }),\n      frameRate: 10,\n      repeat: -1,\n    });\n\n    // Input\n    this.cursors = this.input.keyboard.createCursorKeys();\n\n    // Add obstacles (e.g., rocks)\n    this.obstacles = this.physics.add.staticGroup();\n    this.obstacles.create(200, 100, \"rock\");\n    this.obstacles.create(300, 150, \"rock\");\n\n    // Collision detection\n    this.physics.add.collider(this.player, this.obstacles);\n  }\n\n  update() {\n    const speed = 100;\n    const velocity = { x: 0, y: 0 };\n\n    if (this.cursors.left?.isDown) {\n      velocity.x = -speed;\n      this.player.anims.play(\"walk-left\", true);\n    } else if (this.cursors.right?.isDown) {\n      velocity.x = speed;\n      this.player.anims.play(\"walk-right\", true);\n    } else if (this.cursors.up?.isDown) {\n      velocity.y = -speed;\n      this.player.anims.play(\"walk-up\", true);\n    } else if (this.cursors.down?.isDown) {\n      velocity.y = speed;\n      this.player.anims.play(\"walk-down\", true);\n    } else {\n      this.player.setVelocity(0, 0);\n      return;\n    }\n\n    this.player.setVelocity(velocity.x, velocity.y);\n  }\n}\n```\n\n### Critical Evaluation\n- **Benefits:**\n  - Extremely clear and easy to follow; all logic is in one place.\n  - No unnecessary abstractions or indirection.\n  - Easy to refactor as requirements change.\n  - Fast to prototype and iterate.\n- **Drawbacks:**\n  - As the game grows (e.g., more input types, more entities, inventory, tile placement), the scene can become bloated and harder to maintain.\n  - Harder to test logic in isolation (e.g., movement, collision) without running the full game.\n  - Tightly coupled to Phaser; porting to another engine or platform would require significant rewrites.\n\n---\n\n## Entity-Component-System (ECS): Sample & Evaluation\n\n- **Focus:** Composition over inheritance; entities are composed of reusable components, and systems operate on entities with specific components.\n- **Benefits:**\n  - Highly flexible and extensible; new behaviors are added by composing components.\n  - Efficient for games with many similar objects (e.g., tile-based, simulation, or action games).\n  - Decouples data (components) from behavior (systems).\n- **What it solves:**\n  - Avoids deep inheritance hierarchies and promotes code reuse.\n  - Makes it easy to add, remove, or modify behaviors at runtime.\n\n\n### Sample Implementation (Complete ECS Example)\n\n```ts\n// --- ECS Core Types ---\ntype Entity = number;\ninterface Component {}\ninterface System {\n  update(entities: Entity[], components: Map\u003Cstring, Map\u003CEntity, Component>>, scene: Phaser.Scene): void;\n}\n\n// --- Components ---\ninterface Position extends Component { x: number; y: number; }\ninterface Velocity extends Component { dx: number; dy: number; }\ninterface Sprite extends Component { sprite: Phaser.Physics.Arcade.Sprite; }\ninterface Collider extends Component {}\n\n// --- Systems ---\nclass MovementSystem implements System {\n  update(entities, components) {\n    const positions = components.get('Position')!;\n    const velocities = components.get('Velocity')!;\n    for (const entity of entities) {\n      const pos = positions.get(entity) as Position;\n      const vel = velocities.get(entity) as Velocity;\n      if (pos && vel) {\n        pos.x += vel.dx;\n        pos.y += vel.dy;\n      }\n    }\n  }\n}\n\nclass AnimationSystem implements System {\n  update(entities, components) {\n    const velocities = components.get('Velocity')!;\n    const sprites = components.get('Sprite')!;\n    for (const entity of entities) {\n      const vel = velocities.get(entity) as Velocity;\n      const spriteComp = sprites.get(entity) as Sprite;\n      if (vel && spriteComp) {\n        const sprite = spriteComp.sprite;\n        if (vel.dx \u003C 0) sprite.anims.play('walk-left', true);\n        else if (vel.dx > 0) sprite.anims.play('walk-right', true);\n        else if (vel.dy \u003C 0) sprite.anims.play('walk-up', true);\n        else if (vel.dy > 0) sprite.anims.play('walk-down', true);\n        else sprite.setVelocity(0, 0);\n      }\n    }\n  }\n}\n\nclass CollisionSystem implements System {\n  update(entities, components, scene: Phaser.Scene) {\n    const sprites = components.get('Sprite')!;\n    const colliders = components.get('Collider')!;\n    // Find player and obstacles\n    let playerSprite: Phaser.Physics.Arcade.Sprite | undefined;\n    const obstacleSprites: Phaser.Physics.Arcade.Sprite[] = [];\n    for (const entity of entities) {\n      const spriteComp = sprites.get(entity) as Sprite;\n      if (spriteComp && colliders.has(entity)) {\n        if (!playerSprite) playerSprite = spriteComp.sprite;\n        else obstacleSprites.push(spriteComp.sprite);\n      }\n    }\n    if (playerSprite && obstacleSprites.length) {\n      obstacleSprites.forEach(obstacle => {\n        scene.physics.add.collider(playerSprite, obstacle);\n      });\n    }\n  }\n}\n\n// --- ECS World ---\nclass World {\n  private nextEntityId = 1;\n  private entities: Entity[] = [];\n  private components: Map\u003Cstring, Map\u003CEntity, Component>> = new Map();\n  private systems: System[] = [];\n\n  createEntity(): Entity {\n    const id = this.nextEntityId++;\n    this.entities.push(id);\n    return id;\n  }\n\n  addComponent\u003CT extends Component>(entity: Entity, type: string, component: T) {\n    if (!this.components.has(type)) {\n      this.components.set(type, new Map());\n    }\n    this.components.get(type)!.set(entity, component);\n  }\n\n  addSystem(system: System) {\n    this.systems.push(system);\n  }\n\n  update(scene: Phaser.Scene) {\n    for (const system of this.systems) {\n      system.update(this.entities, this.components, scene);\n    }\n    // Sync position to sprite\n    const positions = this.components.get('Position');\n    const sprites = this.components.get('Sprite');\n    if (positions && sprites) {\n      for (const entity of this.entities) {\n        const pos = positions.get(entity) as Position;\n        const spriteComp = sprites.get(entity) as Sprite;\n        if (pos && spriteComp) {\n          spriteComp.sprite.setPosition(pos.x, pos.y);\n        }\n      }\n    }\n  }\n}\n\n// --- Phaser Scene Integration ---\nimport Phaser from 'phaser';\n\nexport class MainScene extends Phaser.Scene {\n  private world = new World();\n  private playerEntity!: Entity;\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n\n  preload() {\n    this.load.spritesheet('player', 'player.png', { frameWidth: 32, frameHeight: 48 });\n    this.load.image('rock', 'rock.png');\n  }\n\n  create() {\n    // Create player entity\n    this.playerEntity = this.world.createEntity();\n    const playerSprite = this.physics.add.sprite(100, 100, 'player');\n    playerSprite.setCollideWorldBounds(true);\n    this.world.addComponent(this.playerEntity, 'Position', { x: 100, y: 100 });\n    this.world.addComponent(this.playerEntity, 'Velocity', { dx: 0, dy: 0 });\n    this.world.addComponent(this.playerEntity, 'Sprite', { sprite: playerSprite });\n    this.world.addComponent(this.playerEntity, 'Collider', {});\n\n    // Define animations\n    this.anims.create({ key: 'walk-left', frames: this.anims.generateFrameNumbers('player', { start: 9, end: 11 }), frameRate: 10, repeat: -1 });\n    this.anims.create({ key: 'walk-right', frames: this.anims.generateFrameNumbers('player', { start: 6, end: 8 }), frameRate: 10, repeat: -1 });\n    this.anims.create({ key: 'walk-up', frames: this.anims.generateFrameNumbers('player', { start: 3, end: 5 }), frameRate: 10, repeat: -1 });\n    this.anims.create({ key: 'walk-down', frames: this.anims.generateFrameNumbers('player', { start: 0, end: 2 }), frameRate: 10, repeat: -1 });\n\n    // Input\n    this.cursors = this.input.keyboard.createCursorKeys();\n\n    // Create obstacle entities\n    const obstacle1 = this.world.createEntity();\n    const rock1 = this.physics.add.staticSprite(200, 100, 'rock');\n    this.world.addComponent(obstacle1, 'Position', { x: 200, y: 100 });\n    this.world.addComponent(obstacle1, 'Sprite', { sprite: rock1 });\n    this.world.addComponent(obstacle1, 'Collider', {});\n\n    const obstacle2 = this.world.createEntity();\n    const rock2 = this.physics.add.staticSprite(300, 150, 'rock');\n    this.world.addComponent(obstacle2, 'Position', { x: 300, y: 150 });\n    this.world.addComponent(obstacle2, 'Sprite', { sprite: rock2 });\n    this.world.addComponent(obstacle2, 'Collider', {});\n\n    // Add systems\n    this.world.addSystem(new MovementSystem());\n    this.world.addSystem(new AnimationSystem());\n    this.world.addSystem(new CollisionSystem());\n  }\n\n  update() {\n    // Handle input for player\n    const velocity = { dx: 0, dy: 0 };\n    if (this.cursors.left?.isDown) velocity.dx = -100;\n    else if (this.cursors.right?.isDown) velocity.dx = 100;\n    if (this.cursors.up?.isDown) velocity.dy = -100;\n    else if (this.cursors.down?.isDown) velocity.dy = 100;\n    // Update player velocity component\n    const velComp = this.world['components'].get('Velocity')?.get(this.playerEntity) as Velocity;\n    if (velComp) {\n      velComp.dx = velocity.dx;\n      velComp.dy = velocity.dy;\n    }\n    this.world.update(this);\n  }\n}\n```\n\n### Critical Evaluation\n- **Benefits:**\n  - Extremely flexible; new behaviors are added by composing components and systems.\n  - Efficient for games with many similar objects (e.g., tiles, enemies, projectiles).\n  - Decouples data and behavior, making code reusable and testable.\n- **Drawbacks:**\n  - Can be overkill for small/simple games.\n  - More boilerplate and indirection; debugging can be harder.\n  - Requires careful management of component data and system order.\n\n---\n\n## Hexagonal Architecture: Sample & Evaluation\n\n- **Focus:** Clear separation of concerns, decoupling domain logic from frameworks and external systems.\n- **Benefits:**\n  - Highly testable and flexible codebase.\n  - Easy to swap out frameworks, input methods, or rendering engines.\n  - Scales well for large, complex, or long-lived projects.\n- **What it solves:**\n  - Prevents framework lock-in and tangled dependencies.\n  - Enables robust testing and modularity.\n\n### Sample Implementation (Ports & Adapters, Modularized, Improved Separation)\n\n```ts\n// domain/Player.ts\nexport class Player {\n  x: number = 100;\n  y: number = 100;\n  lastDirection: { dx: number; dy: number } = { dx: 0, dy: 1 };\n  move(dx: number, dy: number) {\n    if (dx !== 0 || dy !== 0) {\n      this.lastDirection = { dx, dy };\n    }\n    this.x += dx;\n    this.y += dy;\n  }\n}\n\n// ports/RendererPort.ts\nexport interface RendererPort {\n  drawPlayer(x: number, y: number, anim: string): void;\n}\n\n// ports/InputPort.ts\nexport interface InputPort {\n  getDirection(): { dx: number; dy: number };\n}\n\n// adapters/PhaserRenderer.ts\nimport { RendererPort } from \"../ports/RendererPort\";\nimport Phaser from \"phaser\";\n\nexport class PhaserRenderer implements RendererPort {\n  constructor(private scene: Phaser.Scene, private sprite: Phaser.GameObjects.Sprite) {}\n  drawPlayer(x: number, y: number, anim: string) {\n    this.sprite.setPosition(x, y);\n    this.sprite.anims.play(anim, true);\n  }\n}\n\n// adapters/KeyboardInput.ts\nimport { InputPort } from \"../ports/InputPort\";\nimport Phaser from \"phaser\";\n\nexport class KeyboardInput implements InputPort {\n  private cursors: Phaser.Types.Input.Keyboard.CursorKeys;\n  constructor(scene: Phaser.Scene) {\n    this.cursors = scene.input.keyboard.createCursorKeys();\n  }\n  getDirection() {\n    if (this.cursors.left?.isDown) return { dx: -1, dy: 0 };\n    if (this.cursors.right?.isDown) return { dx: 1, dy: 0 };\n    if (this.cursors.up?.isDown) return { dx: 0, dy: -1 };\n    if (this.cursors.down?.isDown) return { dx: 0, dy: 1 };\n    return { dx: 0, dy: 0 };\n  }\n}\n\n// application/GameLoop.ts\nimport { Player } from \"../domain/Player\";\nimport { RendererPort } from \"../ports/RendererPort\";\nimport { InputPort } from \"../ports/InputPort\";\n\nfunction getAnimationKey(dx: number, dy: number, lastDirection: { dx: number; dy: number }): string {\n  if (dx === 0 && dy === 0) {\n    // Idle animation based on last direction\n    if (lastDirection.dx === -1) return \"idle-left\";\n    if (lastDirection.dx === 1) return \"idle-right\";\n    if (lastDirection.dy === -1) return \"idle-up\";\n    return \"idle-down\";\n  }\n  if (dx === -1) return \"walk-left\";\n  if (dx === 1) return \"walk-right\";\n  if (dy === -1) return \"walk-up\";\n  if (dy === 1) return \"walk-down\";\n  return \"idle-down\";\n}\n\nexport class GameLoop {\n  constructor(\n    private player: Player,\n    private renderer: RendererPort,\n    private input: InputPort\n  ) {}\n  update() {\n    const { dx, dy } = this.input.getDirection();\n    this.player.move(dx, dy);\n    const anim = getAnimationKey(dx, dy, this.player.lastDirection);\n    this.renderer.drawPlayer(this.player.x, this.player.y, anim);\n  }\n}\n\n// scenes/MainScene.ts\nimport Phaser from \"phaser\";\nimport { Player } from \"../domain/Player\";\nimport { PhaserRenderer } from \"../adapters/PhaserRenderer\";\nimport { KeyboardInput } from \"../adapters/KeyboardInput\";\nimport { GameLoop } from \"../application/GameLoop\";\n\nexport class MainScene extends Phaser.Scene {\n  private gameLoop!: GameLoop;\n  private playerSprite!: Phaser.GameObjects.Sprite;\n\n  preload() {\n    this.load.spritesheet(\"player\", \"player.png\", { frameWidth: 32, frameHeight: 48 });\n    this.load.image(\"rock\", \"rock.png\");\n  }\n\n  create() {\n    this.playerSprite = this.physics.add.sprite(100, 100, \"player\");\n    this.playerSprite.setCollideWorldBounds(true);\n    // ...obstacle setup and collision as before...\n    const player = new Player();\n    const renderer = new PhaserRenderer(this, this.playerSprite);\n    const input = new KeyboardInput(this);\n    this.gameLoop = new GameLoop(player, renderer, input);\n  }\n\n  update() {\n    this.gameLoop.update();\n  }\n}\n```\n\n### Critical Evaluation\n- **Benefits:**\n  - Clear separation of concerns: input, domain logic, and animation/presentation are modular and testable.\n  - Animation selection is decoupled from input, following best practices.\n  - Easy to extend (e.g., add AI, new input types, or swap out rendering engine).\n  - Domain logic is decoupled from Phaser, making porting and testing easier.\n- **Drawbacks:**\n  - More boilerplate and indirection, especially for small/simple games.\n  - Can feel over-engineered if the game remains simple.\n  - Slightly slower to prototype and iterate due to extra layers.\n\n---\n\n## Model-View-Controller (MVC): Sample & Evaluation\n\n- **Focus:** Separates application logic (model), user interface (view), and input handling (controller).\n- **Benefits:**\n  - Clear separation of concerns; UI and logic can evolve independently.\n  - Multiple views can represent the same model.\n  - Well-suited for UI-heavy or tool-driven games.\n- **What it solves:**\n  - Keeps UI code and business/game logic separate.\n  - Makes it easier to test and maintain code.\n\n### Sample Implementation (MVC)\n\n```ts\n// --- Model ---\nclass PlayerModel {\n  x = 100;\n  y = 100;\n  dx = 0;\n  dy = 0;\n  move(dx: number, dy: number) {\n    this.dx = dx;\n    this.dy = dy;\n    this.x += dx;\n    this.y += dy;\n  }\n}\n\n// --- View ---\nclass PlayerView {\n  constructor(private sprite: Phaser.Physics.Arcade.Sprite) {}\n  render(x: number, y: number, dx: number, dy: number) {\n    this.sprite.setPosition(x, y);\n    if (dx \u003C 0) this.sprite.anims.play('walk-left', true);\n    else if (dx > 0) this.sprite.anims.play('walk-right', true);\n    else if (dy \u003C 0) this.sprite.anims.play('walk-up', true);\n    else if (dy > 0) this.sprite.anims.play('walk-down', true);\n    else this.sprite.setVelocity(0, 0);\n  }\n}\n\n// --- Controller ---\nclass PlayerController {\n  constructor(private model: PlayerModel, private view: PlayerView, private cursors: Phaser.Types.Input.Keyboard.CursorKeys) {}\n  update() {\n    const speed = 100;\n    let dx = 0, dy = 0;\n    if (this.cursors.left?.isDown) dx = -speed;\n    else if (this.cursors.right?.isDown) dx = speed;\n    if (this.cursors.up?.isDown) dy = -speed;\n    else if (this.cursors.down?.isDown) dy = speed;\n    this.model.move(dx, dy);\n    this.view.render(this.model.x, this.model.y, dx, dy);\n  }\n}\n\n// --- Phaser Scene Integration ---\nimport Phaser from 'phaser';\n\nexport class MainScene extends Phaser.Scene {\n  private playerModel!: PlayerModel;\n  private playerView!: PlayerView;\n  private playerController!: PlayerController;\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n  private obstacles!: Phaser.Physics.Arcade.StaticGroup;\n\n  preload() {\n    this.load.spritesheet('player', 'player.png', { frameWidth: 32, frameHeight: 48 });\n    this.load.image('rock', 'rock.png');\n  }\n\n  create() {\n    // Player sprite with physics\n    const playerSprite = this.physics.add.sprite(100, 100, 'player');\n    playerSprite.setCollideWorldBounds(true);\n\n    // Define player walking animations\n    this.anims.create({ key: 'walk-left', frames: this.anims.generateFrameNumbers('player', { start: 9, end: 11 }), frameRate: 10, repeat: -1 });\n    this.anims.create({ key: 'walk-right', frames: this.anims.generateFrameNumbers('player', { start: 6, end: 8 }), frameRate: 10, repeat: -1 });\n    this.anims.create({ key: 'walk-up', frames: this.anims.generateFrameNumbers('player', { start: 3, end: 5 }), frameRate: 10, repeat: -1 });\n    this.anims.create({ key: 'walk-down', frames: this.anims.generateFrameNumbers('player', { start: 0, end: 2 }), frameRate: 10, repeat: -1 });\n\n    // Input\n    this.cursors = this.input.keyboard.createCursorKeys();\n\n    // Add obstacles (e.g., rocks)\n    this.obstacles = this.physics.add.staticGroup();\n    this.obstacles.create(200, 100, 'rock');\n    this.obstacles.create(300, 150, 'rock');\n\n    // Collision detection\n    this.physics.add.collider(playerSprite, this.obstacles);\n\n    // MVC wiring\n    this.playerModel = new PlayerModel();\n    this.playerView = new PlayerView(playerSprite);\n    this.playerController = new PlayerController(this.playerModel, this.playerView, this.cursors);\n  }\n\n  update() {\n    this.playerController.update();\n  }\n}\n```\n\n### Critical Evaluation\n- **Benefits:**\n  - Clear separation of data, presentation, and input logic.\n  - Easy to swap out or test views and controllers independently.\n  - Well-suited for games/tools with complex UI or multiple representations of state.\n- **Drawbacks:**\n  - Can be verbose for simple games.\n  - May require extra glue code to synchronize model and view.\n  - Not always a natural fit for real-time, highly interactive games.\n\n---\n\n## Event-Driven / Observer Pattern: Sample & Evaluation\n\n- **Focus:** Components communicate by emitting and listening for events; observer pattern enables one-to-many notification of state changes.\n- **Benefits:**\n  - Decouples components; emitters and listeners don‚Äôt need to know about each other.\n  - Enables flexible, dynamic interactions and extensibility.\n  - Well-suited for UI, input, and game state changes.\n- **What it solves:**\n  - Reduces tight coupling between systems.\n  - Makes it easy to add new reactions to events without modifying existing code.\n\n### Sample Implementation (Observer/Event-Driven)\n\n```ts\n// --- Subject (Observable) ---\nclass Player {\n  private observers: ((event: string, data?: any) => void)[] = [];\n  x = 100;\n  y = 100;\n  dx = 0;\n  dy = 0;\n  move(dx: number, dy: number) {\n    this.dx = dx;\n    this.dy = dy;\n    this.x += dx;\n    this.y += dy;\n    this.notify('move', { x: this.x, y: this.y, dx, dy });\n  }\n  on(event: string, callback: (event: string, data?: any) => void) {\n    this.observers.push(callback);\n  }\n  notify(event: string, data?: any) {\n    for (const cb of this.observers) cb(event, data);\n  }\n}\n\n// --- Observer (View) ---\nclass PlayerView {\n  constructor(private sprite: Phaser.Physics.Arcade.Sprite, player: Player) {\n    player.on('move', (_, data) => {\n      this.sprite.setPosition(data.x, data.y);\n      // Animation based on direction\n      if (data.dx \u003C 0) this.sprite.anims.play('walk-left', true);\n      else if (data.dx > 0) this.sprite.anims.play('walk-right', true);\n      else if (data.dy \u003C 0) this.sprite.anims.play('walk-up', true);\n      else if (data.dy > 0) this.sprite.anims.play('walk-down', true);\n      else this.sprite.setVelocity(0, 0);\n    });\n  }\n}\n\n// --- Controller ---\nclass PlayerController {\n  constructor(private player: Player, private cursors: Phaser.Types.Input.Keyboard.CursorKeys) {}\n  update() {\n    const speed = 100;\n    let dx = 0, dy = 0;\n    if (this.cursors.left?.isDown) dx = -speed;\n    else if (this.cursors.right?.isDown) dx = speed;\n    if (this.cursors.up?.isDown) dy = -speed;\n    else if (this.cursors.down?.isDown) dy = speed;\n    this.player.move(dx, dy);\n  }\n}\n\n// --- Phaser Scene Integration ---\nimport Phaser from 'phaser';\n\nexport class MainScene extends Phaser.Scene {\n  private player!: Player;\n  private playerView!: PlayerView;\n  private playerController!: PlayerController;\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n  private obstacles!: Phaser.Physics.Arcade.StaticGroup;\n\n  preload() {\n    this.load.spritesheet('player', 'player.png', { frameWidth: 32, frameHeight: 48 });\n    this.load.image('rock', 'rock.png');\n  }\n\n  create() {\n    // Player sprite with physics\n    const playerSprite = this.physics.add.sprite(100, 100, 'player');\n    playerSprite.setCollideWorldBounds(true);\n\n    // Define player walking animations\n    this.anims.create({ key: 'walk-left', frames: this.anims.generateFrameNumbers('player', { start: 9, end: 11 }), frameRate: 10, repeat: -1 });\n    this.anims.create({ key: 'walk-right', frames: this.anims.generateFrameNumbers('player', { start: 6, end: 8 }), frameRate: 10, repeat: -1 });\n    this.anims.create({ key: 'walk-up', frames: this.anims.generateFrameNumbers('player', { start: 3, end: 5 }), frameRate: 10, repeat: -1 });\n    this.anims.create({ key: 'walk-down', frames: this.anims.generateFrameNumbers('player', { start: 0, end: 2 }), frameRate: 10, repeat: -1 });\n\n    // Input\n    this.cursors = this.input.keyboard.createCursorKeys();\n\n    // Add obstacles (e.g., rocks)\n    this.obstacles = this.physics.add.staticGroup();\n    this.obstacles.create(200, 100, 'rock');\n    this.obstacles.create(300, 150, 'rock');\n\n    // Collision detection\n    this.physics.add.collider(playerSprite, this.obstacles);\n\n    // Event-driven wiring\n    this.player = new Player();\n    this.playerView = new PlayerView(playerSprite, this.player);\n    this.playerController = new PlayerController(this.player, this.cursors);\n  }\n\n  update() {\n    this.playerController.update();\n  }\n}\n```\n\n### Critical Evaluation\n- **Benefits:**\n  - Decouples state changes from reactions; easy to add new listeners.\n  - Flexible and extensible; new features can subscribe to events without modifying core logic.\n  - Well-suited for UI, input, and game state changes.\n- **Drawbacks:**\n  - Can lead to hard-to-trace event chains and debugging challenges.\n  - Risk of memory leaks if observers are not properly removed.\n  - Overuse can make codebase harder to reason about.\n\n---\n\n## Related Documents\n\nThese companion documents dive deeper into specific subsystems referenced (generation, persistence, performance, and testing strategy):\n\n- [Persistence & Diff Format](./PERSISTENCE.md) ‚Äì Sparse diff storage, versioning, and save semantics.\n- [Biomes](./BIOMES.md) ‚Äì Biome registry, deterministic selection, and palette rationale.\n- [Performance & Instrumentation](./PERFORMANCE.md) ‚Äì Dirty batching, throttling, metrics, dev overlay.\n- [Testing](./TESTING.md) ‚Äì Test stack, coverage areas, and future targets.\n\nUse this architecture document for high‚Äëlevel structural direction; consult the linked docs for implementation details and operational practices.","../../docs/ARCHITECTURE.md","30c7a6a19e1279b6",{"html":25,"metadata":26},"\u003Ch1 id=\"architecture\">Architecture\u003C/h1>\n\u003Cp>This document explores multiple architectural styles for game development, as discussed in the context of a Phaser.js project. We provide an overview of each, sample implementations based on a simple tile-based game (with animation and hit detection), and a critical evaluation of their benefits and drawbacks.\u003C/p>\n\u003Ch2 id=\"table-of-contents\">Table of Contents\u003C/h2>\n\u003Col>\n\u003Cli>Decision\u003C/li>\n\u003Cli>Alternatives\u003C/li>\n\u003Cli>Japanese Software Philosophy: Sample &#x26; Evaluation\u003C/li>\n\u003Cli>Entity-Component-System (ECS): Sample &#x26; Evaluation\u003C/li>\n\u003Cli>Hexagonal Architecture: Sample &#x26; Evaluation\u003C/li>\n\u003Cli>Model-View-Controller (MVC): Sample &#x26; Evaluation\u003C/li>\n\u003Cli>Event-Driven / Observer Pattern: Sample &#x26; Evaluation\u003C/li>\n\u003Cli>Related Documents\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"decision\">Decision\u003C/h2>\n\u003Cp>For Amelcraft, we will begin with the Japanese Software Philosophy (minimalist, in-scene model) to maximize simplicity, rapid prototyping, and maintainability. This approach is ideal for small, fast-evolving games and allows for quick iteration and easy refactoring.\u003C/p>\n\u003Cp>If the game grows in complexity‚Äîsuch as adding more entities, advanced mechanics, or requiring better testability and scalability‚Äîwe will incrementally refactor toward an Entity-Component-System (ECS) or Hexagonal architecture. These styles offer greater modularity, decoupling, and long-term maintainability, but introduce more boilerplate and abstraction.\u003C/p>\n\u003Cp>This staged approach ensures we keep development efficient and accessible in the early phases, while remaining flexible to adopt more robust architectural patterns as needed.\u003C/p>\n\u003Ch2 id=\"alternatives\">Alternatives\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Style\u003C/th>\u003Cth>Core Focus / Principle\u003C/th>\u003Cth>Strengths\u003C/th>\u003Cth>Drawbacks / When to Avoid\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Japanese Software Philosophy\u003C/td>\u003Ctd>Simplicity, clarity, Kaizen\u003C/td>\u003Ctd>Minimal, readable, easy to refactor, fast to prototype\u003C/td>\u003Ctd>Can get messy as complexity grows\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Hexagonal Architecture\u003C/td>\u003Ctd>Separation of concerns, testability\u003C/td>\u003Ctd>Decoupled, testable, flexible, scalable\u003C/td>\u003Ctd>Boilerplate, overkill for small games\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>ECS\u003C/td>\u003Ctd>Composition over inheritance\u003C/td>\u003Ctd>Highly flexible, reusable, efficient for many objects\u003C/td>\u003Ctd>Verbose, harder to debug, overkill small\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>MVC\u003C/td>\u003Ctd>UI/data/input separation\u003C/td>\u003Ctd>Clear roles, easy to test UI/logic separately\u003C/td>\u003Ctd>Verbose, not always natural for games\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Event-Driven / Observer\u003C/td>\u003Ctd>Decoupled event notification\u003C/td>\u003Ctd>Flexible, extensible, easy to add features\u003C/td>\u003Ctd>Can be hard to trace/debug, memory leaks\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>\u003Cstrong>Summary:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>For small, rapidly evolving games, Japanese style or MVC can be ideal.\u003C/li>\n\u003Cli>For large, complex, or long-lived games, Hexagonal or ECS offer better scalability and maintainability.\u003C/li>\n\u003Cli>Event-driven/Observer is best for decoupling and extensibility, but can add complexity if overused.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"japanese-software-philosophy-sample--evaluation\">Japanese Software Philosophy: Sample &#x26; Evaluation\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Focus:\u003C/strong> Code as craftsmanship, simplicity, clarity, and continuous small improvements (Kaizen).\u003C/li>\n\u003Cli>\u003Cstrong>Benefits:\u003C/strong>\n\u003Cul>\n\u003Cli>Highly maintainable and readable code.\u003C/li>\n\u003Cli>Minimal ceremony and abstraction; only extract when needed.\u003C/li>\n\u003Cli>Emphasizes bug prevention and immediate fixes.\u003C/li>\n\u003Cli>Evolves codebase gradually, avoiding speculative design.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>What it solves:\u003C/strong>\n\u003Cul>\n\u003Cli>Reduces over-engineering and unnecessary complexity.\u003C/li>\n\u003Cli>Keeps codebase approachable and easy to refactor.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"sample-implementation-minimalist-in-scene-model\">Sample Implementation (Minimalist, In-Scene Model)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Phaser \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"phaser\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> MainScene\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scene\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> player\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Physics\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Arcade\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> cursors\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Types\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Input\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Keyboard\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">CursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> obstacles\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Physics\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Arcade\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">StaticGroup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  preload\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.load.\u003C/span>\u003Cspan style=\"color:#B392F0\">spritesheet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"player\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"player.png\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      frameWidth: \u003C/span>\u003Cspan style=\"color:#79B8FF\">32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      frameHeight: \u003C/span>\u003Cspan style=\"color:#79B8FF\">48\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.load.\u003C/span>\u003Cspan style=\"color:#B392F0\">image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rock\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rock.png\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Player sprite with physics\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"player\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.\u003C/span>\u003Cspan style=\"color:#B392F0\">setCollideWorldBounds\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Define player walking animations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"walk-left\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"player\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">9\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">11\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"walk-right\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"player\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"walk-up\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"player\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"walk-down\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"player\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.input.keyboard.\u003C/span>\u003Cspan style=\"color:#B392F0\">createCursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Add obstacles (e.g., rocks)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">staticGroup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rock\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">300\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">150\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rock\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Collision detection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">collider\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> speed\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> velocity\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { x: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.left?.isDown) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      velocity.x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"walk-left\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.right?.isDown) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      velocity.x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"walk-right\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.up?.isDown) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      velocity.y \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"walk-up\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.down?.isDown) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      velocity.y \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"walk-down\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.\u003C/span>\u003Cspan style=\"color:#B392F0\">setVelocity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.\u003C/span>\u003Cspan style=\"color:#B392F0\">setVelocity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(velocity.x, velocity.y);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"critical-evaluation\">Critical Evaluation\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Benefits:\u003C/strong>\n\u003Cul>\n\u003Cli>Extremely clear and easy to follow; all logic is in one place.\u003C/li>\n\u003Cli>No unnecessary abstractions or indirection.\u003C/li>\n\u003Cli>Easy to refactor as requirements change.\u003C/li>\n\u003Cli>Fast to prototype and iterate.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Drawbacks:\u003C/strong>\n\u003Cul>\n\u003Cli>As the game grows (e.g., more input types, more entities, inventory, tile placement), the scene can become bloated and harder to maintain.\u003C/li>\n\u003Cli>Harder to test logic in isolation (e.g., movement, collision) without running the full game.\u003C/li>\n\u003Cli>Tightly coupled to Phaser; porting to another engine or platform would require significant rewrites.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"entity-component-system-ecs-sample--evaluation\">Entity-Component-System (ECS): Sample &#x26; Evaluation\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Focus:\u003C/strong> Composition over inheritance; entities are composed of reusable components, and systems operate on entities with specific components.\u003C/li>\n\u003Cli>\u003Cstrong>Benefits:\u003C/strong>\n\u003Cul>\n\u003Cli>Highly flexible and extensible; new behaviors are added by composing components.\u003C/li>\n\u003Cli>Efficient for games with many similar objects (e.g., tile-based, simulation, or action games).\u003C/li>\n\u003Cli>Decouples data (components) from behavior (systems).\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>What it solves:\u003C/strong>\n\u003Cul>\n\u003Cli>Avoids deep inheritance hierarchies and promotes code reuse.\u003C/li>\n\u003Cli>Makes it easy to add, remove, or modify behaviors at runtime.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"sample-implementation-complete-ecs-example\">Sample Implementation (Complete ECS Example)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- ECS Core Types ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> Entity\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> System\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">entities\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Entity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[], \u003C/span>\u003Cspan style=\"color:#FFAB70\">components\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Entity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>>, \u003C/span>\u003Cspan style=\"color:#FFAB70\">scene\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scene\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> void\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- Components ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> Position\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> Velocity\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">dx\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">dy\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> Sprite\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">sprite\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Physics\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Arcade\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> Collider\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- Systems ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> MovementSystem\u003C/span>\u003Cspan style=\"color:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#B392F0\"> System\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">entities\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">components\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> positions\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> components.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Position'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> velocities\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> components.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Velocity'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> entity\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> entities) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> pos\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> positions.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(entity) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> Position\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> vel\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> velocities.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(entity) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> Velocity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (pos \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> vel) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        pos.x \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> vel.dx;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        pos.y \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> vel.dy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> AnimationSystem\u003C/span>\u003Cspan style=\"color:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#B392F0\"> System\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">entities\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">components\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> velocities\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> components.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Velocity'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> sprites\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> components.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Sprite'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> entity\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> entities) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> vel\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> velocities.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(entity) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> Velocity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> spriteComp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sprites.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(entity) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> Sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (vel \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> spriteComp) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> sprite\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> spriteComp.sprite;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (vel.dx \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-left'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (vel.dx \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-right'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (vel.dy \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-up'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (vel.dy \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-down'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setVelocity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> CollisionSystem\u003C/span>\u003Cspan style=\"color:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#B392F0\"> System\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">entities\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">components\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">scene\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scene\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> sprites\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> components.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Sprite'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> colliders\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> components.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Collider'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Find player and obstacles\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> playerSprite\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Physics\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Arcade\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Sprite\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obstacleSprites\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Physics\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Arcade\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> entity\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> entities) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> spriteComp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sprites.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(entity) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> Sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (spriteComp \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> colliders.\u003C/span>\u003Cspan style=\"color:#B392F0\">has\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(entity)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">playerSprite) playerSprite \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> spriteComp.sprite;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> obstacleSprites.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(spriteComp.sprite);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (playerSprite \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> obstacleSprites.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      obstacleSprites.\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">obstacle\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        scene.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">collider\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(playerSprite, obstacle);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- ECS World ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> World\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> nextEntityId\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> entities\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Entity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> components\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Entity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> systems\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> System\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  createEntity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Entity\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> id\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.nextEntityId\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.entities.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(id);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">T\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#FFAB70\">entity\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Entity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">type\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">component\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> T\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.components.\u003C/span>\u003Cspan style=\"color:#B392F0\">has\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(type)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.components.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(type, \u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.components.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(type)\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(entity, component);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  addSystem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">system\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> System\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.systems.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(system);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">scene\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scene\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> system\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.systems) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      system.\u003C/span>\u003Cspan style=\"color:#B392F0\">update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.entities, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.components, scene);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Sync position to sprite\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> positions\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.components.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Position'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> sprites\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.components.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Sprite'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (positions \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sprites) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> entity\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.entities) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> pos\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> positions.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(entity) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> Position\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> spriteComp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sprites.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(entity) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> Sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (pos \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> spriteComp) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          spriteComp.sprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setPosition\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(pos.x, pos.y);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- Phaser Scene Integration ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Phaser \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'phaser'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> MainScene\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scene\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> world\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> World\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> playerEntity\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Entity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> cursors\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Types\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Input\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Keyboard\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">CursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  preload\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.load.\u003C/span>\u003Cspan style=\"color:#B392F0\">spritesheet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player.png'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { frameWidth: \u003C/span>\u003Cspan style=\"color:#79B8FF\">32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frameHeight: \u003C/span>\u003Cspan style=\"color:#79B8FF\">48\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.load.\u003C/span>\u003Cspan style=\"color:#B392F0\">image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock.png'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Create player entity\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerEntity \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">createEntity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> playerSprite\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    playerSprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setCollideWorldBounds\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerEntity, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Position'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { x: \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y: \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerEntity, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Velocity'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { dx: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, dy: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerEntity, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Sprite'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { sprite: playerSprite });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerEntity, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Collider'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Define animations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-left'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">9\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">11\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-right'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-up'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-down'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.input.keyboard.\u003C/span>\u003Cspan style=\"color:#B392F0\">createCursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Create obstacle entities\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obstacle1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">createEntity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> rock1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">staticSprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obstacle1, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Position'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { x: \u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y: \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obstacle1, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Sprite'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { sprite: rock1 });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obstacle1, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Collider'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obstacle2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">createEntity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> rock2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">staticSprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">300\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">150\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obstacle2, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Position'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { x: \u003C/span>\u003Cspan style=\"color:#79B8FF\">300\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, y: \u003C/span>\u003Cspan style=\"color:#79B8FF\">150\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obstacle2, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Sprite'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { sprite: rock2 });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obstacle2, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Collider'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Add systems\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addSystem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> MovementSystem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addSystem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> AnimationSystem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">addSystem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> CollisionSystem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Handle input for player\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> velocity\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { dx: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, dy: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.left?.isDown) velocity.dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.right?.isDown) velocity.dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.up?.isDown) velocity.dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.down?.isDown) velocity.dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Update player velocity component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> velComp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'components'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">].\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Velocity'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)?.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerEntity) \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> Velocity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (velComp) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      velComp.dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> velocity.dx;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      velComp.dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> velocity.dy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.world.\u003C/span>\u003Cspan style=\"color:#B392F0\">update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"critical-evaluation-1\">Critical Evaluation\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Benefits:\u003C/strong>\n\u003Cul>\n\u003Cli>Extremely flexible; new behaviors are added by composing components and systems.\u003C/li>\n\u003Cli>Efficient for games with many similar objects (e.g., tiles, enemies, projectiles).\u003C/li>\n\u003Cli>Decouples data and behavior, making code reusable and testable.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Drawbacks:\u003C/strong>\n\u003Cul>\n\u003Cli>Can be overkill for small/simple games.\u003C/li>\n\u003Cli>More boilerplate and indirection; debugging can be harder.\u003C/li>\n\u003Cli>Requires careful management of component data and system order.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"hexagonal-architecture-sample--evaluation\">Hexagonal Architecture: Sample &#x26; Evaluation\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Focus:\u003C/strong> Clear separation of concerns, decoupling domain logic from frameworks and external systems.\u003C/li>\n\u003Cli>\u003Cstrong>Benefits:\u003C/strong>\n\u003Cul>\n\u003Cli>Highly testable and flexible codebase.\u003C/li>\n\u003Cli>Easy to swap out frameworks, input methods, or rendering engines.\u003C/li>\n\u003Cli>Scales well for large, complex, or long-lived projects.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>What it solves:\u003C/strong>\n\u003Cul>\n\u003Cli>Prevents framework lock-in and tangled dependencies.\u003C/li>\n\u003Cli>Enables robust testing and modularity.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"sample-implementation-ports--adapters-modularized-improved-separation\">Sample Implementation (Ports &#x26; Adapters, Modularized, Improved Separation)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// domain/Player.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Player\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  lastDirection\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">dx\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">dy\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { dx: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, dy: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  move\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">dx\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">dy\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dx \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.lastDirection \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { dx, dy };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.x \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.y \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ports/RendererPort.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> RendererPort\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  drawPlayer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">anim\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> void\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ports/InputPort.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> InputPort\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  getDirection\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">dx\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">dy\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// adapters/PhaserRenderer.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { RendererPort } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"../ports/RendererPort\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Phaser \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"phaser\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> PhaserRenderer\u003C/span>\u003Cspan style=\"color:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#B392F0\"> RendererPort\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> scene\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scene\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> sprite\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">GameObjects\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  drawPlayer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">anim\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setPosition\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(x, y);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(anim, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// adapters/KeyboardInput.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { InputPort } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"../ports/InputPort\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Phaser \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"phaser\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> KeyboardInput\u003C/span>\u003Cspan style=\"color:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#B392F0\"> InputPort\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> cursors\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Types\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Input\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Keyboard\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">CursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">scene\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scene\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> scene.input.keyboard.\u003C/span>\u003Cspan style=\"color:#B392F0\">createCursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  getDirection\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.left?.isDown) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { dx: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, dy: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.right?.isDown) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { dx: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, dy: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.up?.isDown) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { dx: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, dy: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.down?.isDown) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { dx: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, dy: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { dx: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, dy: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// application/GameLoop.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Player } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"../domain/Player\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { RendererPort } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"../ports/RendererPort\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { InputPort } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"../ports/InputPort\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getAnimationKey\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">dx\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">dy\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">lastDirection\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">dx\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">dy\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dx \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Idle animation based on last direction\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (lastDirection.dx \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"idle-left\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (lastDirection.dx \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"idle-right\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (lastDirection.dy \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"idle-up\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"idle-down\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dx \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"walk-left\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dx \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"walk-right\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dy \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"walk-up\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dy \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"walk-down\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"idle-down\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> GameLoop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> player\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Player\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> renderer\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> RendererPort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> input\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> InputPort\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">dx\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">dy\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.input.\u003C/span>\u003Cspan style=\"color:#B392F0\">getDirection\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.\u003C/span>\u003Cspan style=\"color:#B392F0\">move\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(dx, dy);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> anim\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> getAnimationKey\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(dx, dy, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.lastDirection);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.renderer.\u003C/span>\u003Cspan style=\"color:#B392F0\">drawPlayer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.x, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.y, anim);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// scenes/MainScene.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Phaser \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"phaser\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Player } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"../domain/Player\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { PhaserRenderer } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"../adapters/PhaserRenderer\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { KeyboardInput } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"../adapters/KeyboardInput\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { GameLoop } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"../application/GameLoop\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> MainScene\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scene\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> gameLoop\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> GameLoop\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> playerSprite\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">GameObjects\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  preload\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.load.\u003C/span>\u003Cspan style=\"color:#B392F0\">spritesheet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"player\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"player.png\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { frameWidth: \u003C/span>\u003Cspan style=\"color:#79B8FF\">32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frameHeight: \u003C/span>\u003Cspan style=\"color:#79B8FF\">48\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.load.\u003C/span>\u003Cspan style=\"color:#B392F0\">image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rock\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rock.png\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerSprite \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"player\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerSprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setCollideWorldBounds\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ...obstacle setup and collision as before...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> player\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Player\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> renderer\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> PhaserRenderer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerSprite);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> input\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> KeyboardInput\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.gameLoop \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> GameLoop\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(player, renderer, input);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.gameLoop.\u003C/span>\u003Cspan style=\"color:#B392F0\">update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"critical-evaluation-2\">Critical Evaluation\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Benefits:\u003C/strong>\n\u003Cul>\n\u003Cli>Clear separation of concerns: input, domain logic, and animation/presentation are modular and testable.\u003C/li>\n\u003Cli>Animation selection is decoupled from input, following best practices.\u003C/li>\n\u003Cli>Easy to extend (e.g., add AI, new input types, or swap out rendering engine).\u003C/li>\n\u003Cli>Domain logic is decoupled from Phaser, making porting and testing easier.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Drawbacks:\u003C/strong>\n\u003Cul>\n\u003Cli>More boilerplate and indirection, especially for small/simple games.\u003C/li>\n\u003Cli>Can feel over-engineered if the game remains simple.\u003C/li>\n\u003Cli>Slightly slower to prototype and iterate due to extra layers.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"model-view-controller-mvc-sample--evaluation\">Model-View-Controller (MVC): Sample &#x26; Evaluation\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Focus:\u003C/strong> Separates application logic (model), user interface (view), and input handling (controller).\u003C/li>\n\u003Cli>\u003Cstrong>Benefits:\u003C/strong>\n\u003Cul>\n\u003Cli>Clear separation of concerns; UI and logic can evolve independently.\u003C/li>\n\u003Cli>Multiple views can represent the same model.\u003C/li>\n\u003Cli>Well-suited for UI-heavy or tool-driven games.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>What it solves:\u003C/strong>\n\u003Cul>\n\u003Cli>Keeps UI code and business/game logic separate.\u003C/li>\n\u003Cli>Makes it easier to test and maintain code.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"sample-implementation-mvc\">Sample Implementation (MVC)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- Model ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerModel\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  x\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  y\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  dx\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  dy\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  move\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">dx\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">dy\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.x \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.y \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- View ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerView\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> sprite\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Physics\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Arcade\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">dx\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">dy\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setPosition\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(x, y);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dx \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-left'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dx \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-right'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dy \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-up'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (dy \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-down'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setVelocity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- Controller ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerController\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> model\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerModel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> view\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerView\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> cursors\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Types\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Input\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Keyboard\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">CursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> speed\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.left?.isDown) dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.right?.isDown) dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.up?.isDown) dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.down?.isDown) dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.model.\u003C/span>\u003Cspan style=\"color:#B392F0\">move\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(dx, dy);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.view.\u003C/span>\u003Cspan style=\"color:#B392F0\">render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.model.x, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.model.y, dx, dy);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- Phaser Scene Integration ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Phaser \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'phaser'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> MainScene\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scene\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> playerModel\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerModel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> playerView\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerView\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> playerController\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerController\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> cursors\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Types\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Input\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Keyboard\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">CursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> obstacles\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Physics\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Arcade\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">StaticGroup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  preload\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.load.\u003C/span>\u003Cspan style=\"color:#B392F0\">spritesheet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player.png'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { frameWidth: \u003C/span>\u003Cspan style=\"color:#79B8FF\">32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frameHeight: \u003C/span>\u003Cspan style=\"color:#79B8FF\">48\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.load.\u003C/span>\u003Cspan style=\"color:#B392F0\">image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock.png'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Player sprite with physics\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> playerSprite\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    playerSprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setCollideWorldBounds\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Define player walking animations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-left'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">9\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">11\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-right'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-up'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-down'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.input.keyboard.\u003C/span>\u003Cspan style=\"color:#B392F0\">createCursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Add obstacles (e.g., rocks)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">staticGroup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">300\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">150\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Collision detection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">collider\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(playerSprite, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // MVC wiring\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerModel \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerModel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerView \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerView\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(playerSprite);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerController \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerController\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerModel, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerView, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerController.\u003C/span>\u003Cspan style=\"color:#B392F0\">update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"critical-evaluation-3\">Critical Evaluation\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Benefits:\u003C/strong>\n\u003Cul>\n\u003Cli>Clear separation of data, presentation, and input logic.\u003C/li>\n\u003Cli>Easy to swap out or test views and controllers independently.\u003C/li>\n\u003Cli>Well-suited for games/tools with complex UI or multiple representations of state.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Drawbacks:\u003C/strong>\n\u003Cul>\n\u003Cli>Can be verbose for simple games.\u003C/li>\n\u003Cli>May require extra glue code to synchronize model and view.\u003C/li>\n\u003Cli>Not always a natural fit for real-time, highly interactive games.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"event-driven--observer-pattern-sample--evaluation\">Event-Driven / Observer Pattern: Sample &#x26; Evaluation\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Focus:\u003C/strong> Components communicate by emitting and listening for events; observer pattern enables one-to-many notification of state changes.\u003C/li>\n\u003Cli>\u003Cstrong>Benefits:\u003C/strong>\n\u003Cul>\n\u003Cli>Decouples components; emitters and listeners don‚Äôt need to know about each other.\u003C/li>\n\u003Cli>Enables flexible, dynamic interactions and extensibility.\u003C/li>\n\u003Cli>Well-suited for UI, input, and game state changes.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>What it solves:\u003C/strong>\n\u003Cul>\n\u003Cli>Reduces tight coupling between systems.\u003C/li>\n\u003Cli>Makes it easy to add new reactions to events without modifying existing code.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"sample-implementation-observerevent-driven\">Sample Implementation (Observer/Event-Driven)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- Subject (Observable) ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Player\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> observers\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ((\u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> void\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  x\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  y\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  dx\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  dy\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  move\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">dx\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">dy\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.x \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.y \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">notify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'move'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { x: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.x, y: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.y, dx, dy });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">callback\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> void\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.observers.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(callback);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  notify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> cb\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.observers) \u003C/span>\u003Cspan style=\"color:#B392F0\">cb\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(event, data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- Observer (View) ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerView\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> sprite\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Physics\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Arcade\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">player\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Player\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    player.\u003C/span>\u003Cspan style=\"color:#B392F0\">on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'move'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">_\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setPosition\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data.x, data.y);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Animation based on direction\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (data.dx \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-left'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (data.dx \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-right'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (data.dy \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-up'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (data.dy \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">play\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-down'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      else\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.sprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setVelocity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- Controller ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerController\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> player\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Player\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> cursors\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Types\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Input\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Keyboard\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">CursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> speed\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.left?.isDown) dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.right?.isDown) dx \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.up?.isDown) dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors.down?.isDown) dy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> speed;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player.\u003C/span>\u003Cspan style=\"color:#B392F0\">move\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(dx, dy);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// --- Phaser Scene Integration ---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Phaser \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'phaser'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#B392F0\"> MainScene\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Scene\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> player\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Player\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> playerView\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerView\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> playerController\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerController\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> cursors\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Types\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Input\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Keyboard\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">CursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  private\u003C/span>\u003Cspan style=\"color:#FFAB70\"> obstacles\u003C/span>\u003Cspan style=\"color:#F97583\">!:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Physics\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Arcade\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">StaticGroup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  preload\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.load.\u003C/span>\u003Cspan style=\"color:#B392F0\">spritesheet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player.png'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { frameWidth: \u003C/span>\u003Cspan style=\"color:#79B8FF\">32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frameHeight: \u003C/span>\u003Cspan style=\"color:#79B8FF\">48\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.load.\u003C/span>\u003Cspan style=\"color:#B392F0\">image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock.png'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Player sprite with physics\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> playerSprite\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">sprite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    playerSprite.\u003C/span>\u003Cspan style=\"color:#B392F0\">setCollideWorldBounds\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Define player walking animations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-left'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">9\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">11\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-right'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-up'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ key: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'walk-down'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, frames: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.anims.\u003C/span>\u003Cspan style=\"color:#B392F0\">generateFrameNumbers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'player'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { start: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, end: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), frameRate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, repeat: \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.input.keyboard.\u003C/span>\u003Cspan style=\"color:#B392F0\">createCursorKeys\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Add obstacles (e.g., rocks)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">staticGroup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">300\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">150\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rock'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Collision detection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.physics.add.\u003C/span>\u003Cspan style=\"color:#B392F0\">collider\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(playerSprite, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.obstacles);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Event-driven wiring\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Player\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerView \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerView\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(playerSprite, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerController \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> PlayerController\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.player, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.cursors);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.playerController.\u003C/span>\u003Cspan style=\"color:#B392F0\">update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"critical-evaluation-4\">Critical Evaluation\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Benefits:\u003C/strong>\n\u003Cul>\n\u003Cli>Decouples state changes from reactions; easy to add new listeners.\u003C/li>\n\u003Cli>Flexible and extensible; new features can subscribe to events without modifying core logic.\u003C/li>\n\u003Cli>Well-suited for UI, input, and game state changes.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Drawbacks:\u003C/strong>\n\u003Cul>\n\u003Cli>Can lead to hard-to-trace event chains and debugging challenges.\u003C/li>\n\u003Cli>Risk of memory leaks if observers are not properly removed.\u003C/li>\n\u003Cli>Overuse can make codebase harder to reason about.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"related-documents\">Related Documents\u003C/h2>\n\u003Cp>These companion documents dive deeper into specific subsystems referenced (generation, persistence, performance, and testing strategy):\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"./PERSISTENCE.md\">Persistence &#x26; Diff Format\u003C/a> ‚Äì Sparse diff storage, versioning, and save semantics.\u003C/li>\n\u003Cli>\u003Ca href=\"./BIOMES.md\">Biomes\u003C/a> ‚Äì Biome registry, deterministic selection, and palette rationale.\u003C/li>\n\u003Cli>\u003Ca href=\"./PERFORMANCE.md\">Performance &#x26; Instrumentation\u003C/a> ‚Äì Dirty batching, throttling, metrics, dev overlay.\u003C/li>\n\u003Cli>\u003Ca href=\"./TESTING.md\">Testing\u003C/a> ‚Äì Test stack, coverage areas, and future targets.\u003C/li>\n\u003C/ul>\n\u003Cp>Use this architecture document for high‚Äëlevel structural direction; consult the linked docs for implementation details and operational practices.\u003C/p>",{"headings":27,"localImagePaths":86,"remoteImagePaths":87,"frontmatter":88,"imagePaths":89},[28,31,35,38,41,44,48,51,54,57,59,62,65,67,70,73,75,78,81,83],{"depth":29,"slug":18,"text":30},1,"Architecture",{"depth":32,"slug":33,"text":34},2,"table-of-contents","Table of Contents",{"depth":32,"slug":36,"text":37},"decision","Decision",{"depth":32,"slug":39,"text":40},"alternatives","Alternatives",{"depth":32,"slug":42,"text":43},"japanese-software-philosophy-sample--evaluation","Japanese Software Philosophy: Sample & Evaluation",{"depth":45,"slug":46,"text":47},3,"sample-implementation-minimalist-in-scene-model","Sample Implementation (Minimalist, In-Scene Model)",{"depth":45,"slug":49,"text":50},"critical-evaluation","Critical Evaluation",{"depth":32,"slug":52,"text":53},"entity-component-system-ecs-sample--evaluation","Entity-Component-System (ECS): Sample & Evaluation",{"depth":45,"slug":55,"text":56},"sample-implementation-complete-ecs-example","Sample Implementation (Complete ECS Example)",{"depth":45,"slug":58,"text":50},"critical-evaluation-1",{"depth":32,"slug":60,"text":61},"hexagonal-architecture-sample--evaluation","Hexagonal Architecture: Sample & Evaluation",{"depth":45,"slug":63,"text":64},"sample-implementation-ports--adapters-modularized-improved-separation","Sample Implementation (Ports & Adapters, Modularized, Improved Separation)",{"depth":45,"slug":66,"text":50},"critical-evaluation-2",{"depth":32,"slug":68,"text":69},"model-view-controller-mvc-sample--evaluation","Model-View-Controller (MVC): Sample & Evaluation",{"depth":45,"slug":71,"text":72},"sample-implementation-mvc","Sample Implementation (MVC)",{"depth":45,"slug":74,"text":50},"critical-evaluation-3",{"depth":32,"slug":76,"text":77},"event-driven--observer-pattern-sample--evaluation","Event-Driven / Observer Pattern: Sample & Evaluation",{"depth":45,"slug":79,"text":80},"sample-implementation-observerevent-driven","Sample Implementation (Observer/Event-Driven)",{"depth":45,"slug":82,"text":50},"critical-evaluation-4",{"depth":32,"slug":84,"text":85},"related-documents","Related Documents",[],[],{},[],"assets",{"id":90,"data":92,"body":93,"filePath":94,"digest":95,"deferredRender":17},{},"import Pack from '@components/Pack.astro';\n\n# Assets\n\nimport pack from '../apps/amelcraft/assets/pack.json';\n\n\u003CPack data={pack} basePath=\"/\" />","../../docs/ASSETS.mdx","122dace5985d882c","features",{"id":96,"data":98,"body":99,"filePath":100,"digest":101,"rendered":102},{},"# Features\n\n## Player Movement\n\n- The player can select \"Moving\" mode via the HUD.\n- While in Moving mode, pressing and holding the mouse button or touch pointer causes the PC to walk toward the pointer, following it as long as it is pressed.\n- If the player moves the mouse/pointer while it's being pressed, the PC will change its course and walk towards the new destination\n- The PC cannot walk onto invalid terrain:\n  - Water Blocks\n- No tile highlighting occurs in this mode.\n- The camera follows the PC, maintaining visibility and recentering if the PC nears the edge.\n- Zooming is available via scroll wheel (mouse) or pinch (touch), always centering on the PC.\n\n## Inventory\n\n- The player has an inventory with all collected Blocks and their count\n\n## Block Collection\n\n- The player can select \"Collecting\" mode via the HUD (Pickaxe icon).\n- In Collecting mode, hovering or pressing down on a block highlights it.\n- There is no distance limitation for starting collection; the PC will walk to the block if not adjacent.\n- The PC always turns to face the selected block before collecting.\n- The collecting process uses a 2-second progress bar; if interrupted, the process is canceled.\n- Collection follows inventory rules: blocks are added if space is available, and replaced in the world according to block type rules:\n  - Water:\n    - Water can be collected, increasing its count in the inventory, but the Water block is never removed from the world when collected.\n  - Ground:\n    - When Ground is collected, a Water block appears in its place.\n  - Grass:\n    - Grass always sits on top of Ground.\n    - When Grass is collected, a Ground block appears in its place.\n  - Snow:\n    - Snow always sits on top of Ground.\n    - When Snow is collected, a Ground block appears in its place.\n  - Sand:\n    - When Sand is collected, a Water block appears in its place.\n  - All Other Blocks:\n    - All other blocks, when collected, are replaced by Water Blocks.\n\n## Block Placement\n\n- The player can select \"Placing\" mode via the HUD dropdown (block selection).\n- In Placing mode, hovering a tile highlights it.\n- There is no distance limitation for placing; the PC will walk to the tile if not adjacent.\n- The PC always turns to face the selected tile before placing the block.\n- Placement is only possible if the player has at least one of the selected block type in inventory.\n- Placement decreases the inventory count for the placed block by 1.\n\n## HUD\n\n- The HUD is placed at the bottom center of the view\n- It contains 3 toggleable Buttons: Moving, Block Placement, Block Collection\n- Moving:\n  - When toggled, the Moving mode is activated\n  - Has a fitting monochrome Icon\n- Block Placement:\n  - Will show the Block Inventory, when toggled and set the Block Placement mode active\n  - The Inventory shows every Block in the inventory with count > 0 and their current count in a Badge\n  - The count will immdiately updated, when the inventory updates\n  - The selected Block is used as the Graphic for the Block Placement toggle Button\n- Block Collection:\n  - When toggled, the Block Collecting mode is activated\n  - Has a monchrome pickaxe Icon","../../docs/FEATURES.md","933cfb57a0fd43f8",{"html":103,"metadata":104},"\u003Ch1 id=\"features\">Features\u003C/h1>\n\u003Ch2 id=\"player-movement\">Player Movement\u003C/h2>\n\u003Cul>\n\u003Cli>The player can select ‚ÄúMoving‚Äù mode via the HUD.\u003C/li>\n\u003Cli>While in Moving mode, pressing and holding the mouse button or touch pointer causes the PC to walk toward the pointer, following it as long as it is pressed.\u003C/li>\n\u003Cli>If the player moves the mouse/pointer while it‚Äôs being pressed, the PC will change its course and walk towards the new destination\u003C/li>\n\u003Cli>The PC cannot walk onto invalid terrain:\n\u003Cul>\n\u003Cli>Water Blocks\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>No tile highlighting occurs in this mode.\u003C/li>\n\u003Cli>The camera follows the PC, maintaining visibility and recentering if the PC nears the edge.\u003C/li>\n\u003Cli>Zooming is available via scroll wheel (mouse) or pinch (touch), always centering on the PC.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"inventory\">Inventory\u003C/h2>\n\u003Cul>\n\u003Cli>The player has an inventory with all collected Blocks and their count\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"block-collection\">Block Collection\u003C/h2>\n\u003Cul>\n\u003Cli>The player can select ‚ÄúCollecting‚Äù mode via the HUD (Pickaxe icon).\u003C/li>\n\u003Cli>In Collecting mode, hovering or pressing down on a block highlights it.\u003C/li>\n\u003Cli>There is no distance limitation for starting collection; the PC will walk to the block if not adjacent.\u003C/li>\n\u003Cli>The PC always turns to face the selected block before collecting.\u003C/li>\n\u003Cli>The collecting process uses a 2-second progress bar; if interrupted, the process is canceled.\u003C/li>\n\u003Cli>Collection follows inventory rules: blocks are added if space is available, and replaced in the world according to block type rules:\n\u003Cul>\n\u003Cli>Water:\n\u003Cul>\n\u003Cli>Water can be collected, increasing its count in the inventory, but the Water block is never removed from the world when collected.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Ground:\n\u003Cul>\n\u003Cli>When Ground is collected, a Water block appears in its place.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Grass:\n\u003Cul>\n\u003Cli>Grass always sits on top of Ground.\u003C/li>\n\u003Cli>When Grass is collected, a Ground block appears in its place.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Snow:\n\u003Cul>\n\u003Cli>Snow always sits on top of Ground.\u003C/li>\n\u003Cli>When Snow is collected, a Ground block appears in its place.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Sand:\n\u003Cul>\n\u003Cli>When Sand is collected, a Water block appears in its place.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>All Other Blocks:\n\u003Cul>\n\u003Cli>All other blocks, when collected, are replaced by Water Blocks.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"block-placement\">Block Placement\u003C/h2>\n\u003Cul>\n\u003Cli>The player can select ‚ÄúPlacing‚Äù mode via the HUD dropdown (block selection).\u003C/li>\n\u003Cli>In Placing mode, hovering a tile highlights it.\u003C/li>\n\u003Cli>There is no distance limitation for placing; the PC will walk to the tile if not adjacent.\u003C/li>\n\u003Cli>The PC always turns to face the selected tile before placing the block.\u003C/li>\n\u003Cli>Placement is only possible if the player has at least one of the selected block type in inventory.\u003C/li>\n\u003Cli>Placement decreases the inventory count for the placed block by 1.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"hud\">HUD\u003C/h2>\n\u003Cul>\n\u003Cli>The HUD is placed at the bottom center of the view\u003C/li>\n\u003Cli>It contains 3 toggleable Buttons: Moving, Block Placement, Block Collection\u003C/li>\n\u003Cli>Moving:\n\u003Cul>\n\u003Cli>When toggled, the Moving mode is activated\u003C/li>\n\u003Cli>Has a fitting monochrome Icon\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Block Placement:\n\u003Cul>\n\u003Cli>Will show the Block Inventory, when toggled and set the Block Placement mode active\u003C/li>\n\u003Cli>The Inventory shows every Block in the inventory with count > 0 and their current count in a Badge\u003C/li>\n\u003Cli>The count will immdiately updated, when the inventory updates\u003C/li>\n\u003Cli>The selected Block is used as the Graphic for the Block Placement toggle Button\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Block Collection:\n\u003Cul>\n\u003Cli>When toggled, the Block Collecting mode is activated\u003C/li>\n\u003Cli>Has a monchrome pickaxe Icon\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>",{"headings":105,"localImagePaths":123,"remoteImagePaths":124,"frontmatter":125,"imagePaths":126},[106,108,111,114,117,120],{"depth":29,"slug":96,"text":107},"Features",{"depth":32,"slug":109,"text":110},"player-movement","Player Movement",{"depth":32,"slug":112,"text":113},"inventory","Inventory",{"depth":32,"slug":115,"text":116},"block-collection","Block Collection",{"depth":32,"slug":118,"text":119},"block-placement","Block Placement",{"depth":32,"slug":121,"text":122},"hud","HUD",[],[],{},[],"performance",{"id":127,"data":129,"body":130,"filePath":131,"digest":132,"rendered":133},{},"# Performance & Instrumentation\n\nPhase 11 introduced structured performance controls and metrics for chunked world management.\n\n## Dirty Tile Batching\n`WorldManager.flushDirtyBatched()` distributes a global `dirtyBudgetPerFrame` (default 800) proportionally across active chunks based on each chunk's share of the total dirty tiles, preventing large frame spikes.\n\n## Generation Throttling\n`maxNewChunksPerFrame` (2) limits the number of new chunks fully generated per update to smooth exploration performance.\n\n## Active Chunk Cap\n`maxActiveChunks` (9) enforces a soft 3x3 neighborhood limit. Additional distant loads are skipped with a console warning until older chunks unload.\n\n## Metrics Snapshot\n`WorldManager.getMetrics()` returns:\n\n| Field | Meaning |\n|-------|---------|\n| frame | Frame/update counter |\n| chunksLoaded | Total chunks created this session |\n| chunksUnloaded | Total chunks destroyed/unloaded |\n| savesPerformed | Successful diff saves |\n| dirtyTilesFlushed | Tiles written to tilemap this frame |\n| totalDirtyFlushTimeMs | Time spent flushing in this frame (ms) |\n| generationTimeMs | Time spent generating chunks this frame (ms) |\n| activeChunks | Current loaded chunk count |\n| avgFlushBatchSize | Approximation of average batch size (simplified) |\n\n## Dev Overlay (F3)\nPress F3 to toggle a small overlay that anchors to the camera top-left and scales with zoom. It displays the metrics above for quick profiling during development.\n\n## Future Enhancements\n- Adaptive dirty budget based on recent frame time.\n- Rolling averages / percentiles for flush & generation timings.\n- Memory usage estimation per chunk (tiles + diff + metadata) with warnings.\n- Optional remote telemetry exporter.","../../docs/PERFORMANCE.md","908a7500f8ab1c4a",{"html":134,"metadata":135},"\u003Ch1 id=\"performance--instrumentation\">Performance &#x26; Instrumentation\u003C/h1>\n\u003Cp>Phase 11 introduced structured performance controls and metrics for chunked world management.\u003C/p>\n\u003Ch2 id=\"dirty-tile-batching\">Dirty Tile Batching\u003C/h2>\n\u003Cp>\u003Ccode>WorldManager.flushDirtyBatched()\u003C/code> distributes a global \u003Ccode>dirtyBudgetPerFrame\u003C/code> (default 800) proportionally across active chunks based on each chunk‚Äôs share of the total dirty tiles, preventing large frame spikes.\u003C/p>\n\u003Ch2 id=\"generation-throttling\">Generation Throttling\u003C/h2>\n\u003Cp>\u003Ccode>maxNewChunksPerFrame\u003C/code> (2) limits the number of new chunks fully generated per update to smooth exploration performance.\u003C/p>\n\u003Ch2 id=\"active-chunk-cap\">Active Chunk Cap\u003C/h2>\n\u003Cp>\u003Ccode>maxActiveChunks\u003C/code> (9) enforces a soft 3x3 neighborhood limit. Additional distant loads are skipped with a console warning until older chunks unload.\u003C/p>\n\u003Ch2 id=\"metrics-snapshot\">Metrics Snapshot\u003C/h2>\n\u003Cp>\u003Ccode>WorldManager.getMetrics()\u003C/code> returns:\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Field\u003C/th>\u003Cth>Meaning\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>frame\u003C/td>\u003Ctd>Frame/update counter\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>chunksLoaded\u003C/td>\u003Ctd>Total chunks created this session\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>chunksUnloaded\u003C/td>\u003Ctd>Total chunks destroyed/unloaded\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>savesPerformed\u003C/td>\u003Ctd>Successful diff saves\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>dirtyTilesFlushed\u003C/td>\u003Ctd>Tiles written to tilemap this frame\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>totalDirtyFlushTimeMs\u003C/td>\u003Ctd>Time spent flushing in this frame (ms)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>generationTimeMs\u003C/td>\u003Ctd>Time spent generating chunks this frame (ms)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>activeChunks\u003C/td>\u003Ctd>Current loaded chunk count\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>avgFlushBatchSize\u003C/td>\u003Ctd>Approximation of average batch size (simplified)\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"dev-overlay-f3\">Dev Overlay (F3)\u003C/h2>\n\u003Cp>Press F3 to toggle a small overlay that anchors to the camera top-left and scales with zoom. It displays the metrics above for quick profiling during development.\u003C/p>\n\u003Ch2 id=\"future-enhancements\">Future Enhancements\u003C/h2>\n\u003Cul>\n\u003Cli>Adaptive dirty budget based on recent frame time.\u003C/li>\n\u003Cli>Rolling averages / percentiles for flush &#x26; generation timings.\u003C/li>\n\u003Cli>Memory usage estimation per chunk (tiles + diff + metadata) with warnings.\u003C/li>\n\u003Cli>Optional remote telemetry exporter.\u003C/li>\n\u003C/ul>",{"headings":136,"localImagePaths":158,"remoteImagePaths":159,"frontmatter":160,"imagePaths":161},[137,140,143,146,149,152,155],{"depth":29,"slug":138,"text":139},"performance--instrumentation","Performance & Instrumentation",{"depth":32,"slug":141,"text":142},"dirty-tile-batching","Dirty Tile Batching",{"depth":32,"slug":144,"text":145},"generation-throttling","Generation Throttling",{"depth":32,"slug":147,"text":148},"active-chunk-cap","Active Chunk Cap",{"depth":32,"slug":150,"text":151},"metrics-snapshot","Metrics Snapshot",{"depth":32,"slug":153,"text":154},"dev-overlay-f3","Dev Overlay (F3)",{"depth":32,"slug":156,"text":157},"future-enhancements","Future Enhancements",[],[],{},[],"testing",{"id":162,"data":164,"body":165,"filePath":166,"digest":167,"rendered":168},{},"# Testing\n\nAutomated tests (Vitest) validate deterministic generation, persistence integrity, batching semantics, biome assignment, and metrics shape without requiring a browser rendering context.\n\n## Stack\n- Runner: Vitest (Node environment)\n- Location: `apps/amelcraft/src/proc/*.test.ts`\n- Stubbing: Lightweight FakeScene implements only the Phaser APIs touched by World (tilemap & graphics creation) so tests run headless.\n\n## Current Tests\n| Test | Purpose |\n|------|---------|\n| generation.test.ts | Identical base tile hash for same seed & chunk coords |\n| persistence.test.ts | Round‚Äëtrip apply of serialized diff reproduces mutations |\n| dirty-flush.test.ts | flushDirty(limit) respects limit and reduces dirty set |\n| biomes.test.ts | Deterministic biome selection; desert palette constraint |\n| metrics.test.ts | Metrics object exposes required fields |\n\n## Adding a New Test\n1. Create `\u003Cfeature>.test.ts` under the relevant module folder.\n2. Import { describe, it, expect } from `vitest`.\n3. Stub any additional Phaser methods the code path needs.\n4. Run `npm test` (script `test` in `apps/amelcraft/package.json`).\n\n## Future Coverage Targets\n- Persistence migration when version increments.\n- Performance regression: ensure flush never exceeds budget under synthetic large dirty sets.\n- Biome distribution statistics over an N√óN chunk sample.\n- Property-based shoreline ring invariant.\n\n## Philosophy\nThe suite favors fast, deterministic logic tests over integration tests; rendering & input are already exercised interactively. As systems grow (entities, decorations, metadata), we can expand stubs or introduce a lightweight headless Phaser renderer if needed.","../../docs/TESTING.md","b2fc023545d68e14",{"html":169,"metadata":170},"\u003Ch1 id=\"testing\">Testing\u003C/h1>\n\u003Cp>Automated tests (Vitest) validate deterministic generation, persistence integrity, batching semantics, biome assignment, and metrics shape without requiring a browser rendering context.\u003C/p>\n\u003Ch2 id=\"stack\">Stack\u003C/h2>\n\u003Cul>\n\u003Cli>Runner: Vitest (Node environment)\u003C/li>\n\u003Cli>Location: \u003Ccode>apps/amelcraft/src/proc/*.test.ts\u003C/code>\u003C/li>\n\u003Cli>Stubbing: Lightweight FakeScene implements only the Phaser APIs touched by World (tilemap &#x26; graphics creation) so tests run headless.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"current-tests\">Current Tests\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Test\u003C/th>\u003Cth>Purpose\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>generation.test.ts\u003C/td>\u003Ctd>Identical base tile hash for same seed &#x26; chunk coords\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>persistence.test.ts\u003C/td>\u003Ctd>Round‚Äëtrip apply of serialized diff reproduces mutations\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>dirty-flush.test.ts\u003C/td>\u003Ctd>flushDirty(limit) respects limit and reduces dirty set\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>biomes.test.ts\u003C/td>\u003Ctd>Deterministic biome selection; desert palette constraint\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>metrics.test.ts\u003C/td>\u003Ctd>Metrics object exposes required fields\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"adding-a-new-test\">Adding a New Test\u003C/h2>\n\u003Col>\n\u003Cli>Create \u003Ccode>&#x3C;feature>.test.ts\u003C/code> under the relevant module folder.\u003C/li>\n\u003Cli>Import { describe, it, expect } from \u003Ccode>vitest\u003C/code>.\u003C/li>\n\u003Cli>Stub any additional Phaser methods the code path needs.\u003C/li>\n\u003Cli>Run \u003Ccode>npm test\u003C/code> (script \u003Ccode>test\u003C/code> in \u003Ccode>apps/amelcraft/package.json\u003C/code>).\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"future-coverage-targets\">Future Coverage Targets\u003C/h2>\n\u003Cul>\n\u003Cli>Persistence migration when version increments.\u003C/li>\n\u003Cli>Performance regression: ensure flush never exceeds budget under synthetic large dirty sets.\u003C/li>\n\u003Cli>Biome distribution statistics over an N√óN chunk sample.\u003C/li>\n\u003Cli>Property-based shoreline ring invariant.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"philosophy\">Philosophy\u003C/h2>\n\u003Cp>The suite favors fast, deterministic logic tests over integration tests; rendering &#x26; input are already exercised interactively. As systems grow (entities, decorations, metadata), we can expand stubs or introduce a lightweight headless Phaser renderer if needed.\u003C/p>",{"headings":171,"localImagePaths":189,"remoteImagePaths":190,"frontmatter":191,"imagePaths":192},[172,174,177,180,183,186],{"depth":29,"slug":162,"text":173},"Testing",{"depth":32,"slug":175,"text":176},"stack","Stack",{"depth":32,"slug":178,"text":179},"current-tests","Current Tests",{"depth":32,"slug":181,"text":182},"adding-a-new-test","Adding a New Test",{"depth":32,"slug":184,"text":185},"future-coverage-targets","Future Coverage Targets",{"depth":32,"slug":187,"text":188},"philosophy","Philosophy",[],[],{},[],"persistence",{"id":193,"data":195,"body":196,"filePath":197,"digest":198,"rendered":199},{},"# Persistence & Diff Format\n\nThis document describes how chunks are persisted using a sparse diff overlay against a procedurally regenerated baseline.\n\n## Goals\n- Minimize storage size.\n- Allow generation algorithm to evolve (versioning) while keeping player changes.\n- Avoid saving full 10k-tile arrays for every chunk.\n\n## Data Flow\n1. On first load `World` generates baseline tiles deterministically from `(worldSeed, chunkX, chunkY)`.\n2. Player mutations call `putTileAt` which updates `baseTiles`, compares against `baselineTiles` and updates `overlayDiff`.\n3. Dirty tile indices accumulate; render flushing is batched (Phase 7).\n4. Save is debounced (500ms) per chunk; also forced on unload.\n5. Serialized diff is stored with metadata.\n\n## Serialized Structure\n```ts\ninterface SerializedChunkDiffEntry { i: number; t: number; }\ninterface SerializedChunk {\n  version: number;          // schema/gen version (future use)\n  worldSeed: string | number;\n  chunkX: number;\n  chunkY: number;\n  biomeId: string | null;   // filled after Phase 10\n  diff: SerializedChunkDiffEntry[]; // sparse differences\n  meta?: { i: number }[];   // placeholder for future tile metadata\n  lastTouched: number;      // epoch ms\n}\n```\n\n`diff` contains only indices where `baseTiles[idx] !== baselineTiles[idx]`.\n\n## Versioning Strategy\n- Current `CHUNK_SERIALIZATION_VERSION = 1`.\n- If generation logic changes, old chunks regenerate baseline then reapply diff.\n- Future migrations can read `version` and translate older metadata.\n\n## Atomicity & Reliability\n- IndexedDB store writes full object under key `chunk:${worldSeed}:${x}:${y}`.\n- Optional future enhancement: write to `temp:` key then swap.\n\n## Diff Compaction\nIf `diff.length / (CHUNK_TILES^2)` grows beyond a threshold (e.g. >40%), we can:\n1. Treat current `baseTiles` as new baseline.\n2. Clear `overlayDiff`.\n3. Persist empty diff (compaction).\n\n## Rationale\nComparing arrays each save would be O(n). Maintaining a live diff map keeps mutation cost O(1) and save cost O(diff).\n\n## Edge Cases\n- Unloaded chunk with pending save: timer triggers save before destruction.\n- Interrupted save: acceptable risk; next load regenerates baseline, diff missing -> player changes lost only for last unsaved interval.","../../docs/PERSISTENCE.md","347eee0a71a22bcb",{"html":200,"metadata":201},"\u003Ch1 id=\"persistence--diff-format\">Persistence &#x26; Diff Format\u003C/h1>\n\u003Cp>This document describes how chunks are persisted using a sparse diff overlay against a procedurally regenerated baseline.\u003C/p>\n\u003Ch2 id=\"goals\">Goals\u003C/h2>\n\u003Cul>\n\u003Cli>Minimize storage size.\u003C/li>\n\u003Cli>Allow generation algorithm to evolve (versioning) while keeping player changes.\u003C/li>\n\u003Cli>Avoid saving full 10k-tile arrays for every chunk.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"data-flow\">Data Flow\u003C/h2>\n\u003Col>\n\u003Cli>On first load \u003Ccode>World\u003C/code> generates baseline tiles deterministically from \u003Ccode>(worldSeed, chunkX, chunkY)\u003C/code>.\u003C/li>\n\u003Cli>Player mutations call \u003Ccode>putTileAt\u003C/code> which updates \u003Ccode>baseTiles\u003C/code>, compares against \u003Ccode>baselineTiles\u003C/code> and updates \u003Ccode>overlayDiff\u003C/code>.\u003C/li>\n\u003Cli>Dirty tile indices accumulate; render flushing is batched (Phase 7).\u003C/li>\n\u003Cli>Save is debounced (500ms) per chunk; also forced on unload.\u003C/li>\n\u003Cli>Serialized diff is stored with metadata.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"serialized-structure\">Serialized Structure\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> SerializedChunkDiffEntry\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">i\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">t\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> SerializedChunk\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  version\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;          \u003C/span>\u003Cspan style=\"color:#6A737D\">// schema/gen version (future use)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  worldSeed\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  chunkX\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  chunkY\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  biomeId\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;   \u003C/span>\u003Cspan style=\"color:#6A737D\">// filled after Phase 10\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  diff\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> SerializedChunkDiffEntry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// sparse differences\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  meta\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">i\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }[];   \u003C/span>\u003Cspan style=\"color:#6A737D\">// placeholder for future tile metadata\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  lastTouched\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;      \u003C/span>\u003Cspan style=\"color:#6A737D\">// epoch ms\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>diff\u003C/code> contains only indices where \u003Ccode>baseTiles[idx] !== baselineTiles[idx]\u003C/code>.\u003C/p>\n\u003Ch2 id=\"versioning-strategy\">Versioning Strategy\u003C/h2>\n\u003Cul>\n\u003Cli>Current \u003Ccode>CHUNK_SERIALIZATION_VERSION = 1\u003C/code>.\u003C/li>\n\u003Cli>If generation logic changes, old chunks regenerate baseline then reapply diff.\u003C/li>\n\u003Cli>Future migrations can read \u003Ccode>version\u003C/code> and translate older metadata.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"atomicity--reliability\">Atomicity &#x26; Reliability\u003C/h2>\n\u003Cul>\n\u003Cli>IndexedDB store writes full object under key \u003Ccode>chunk:${worldSeed}:${x}:${y}\u003C/code>.\u003C/li>\n\u003Cli>Optional future enhancement: write to \u003Ccode>temp:\u003C/code> key then swap.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"diff-compaction\">Diff Compaction\u003C/h2>\n\u003Cp>If \u003Ccode>diff.length / (CHUNK_TILES^2)\u003C/code> grows beyond a threshold (e.g. >40%), we can:\u003C/p>\n\u003Col>\n\u003Cli>Treat current \u003Ccode>baseTiles\u003C/code> as new baseline.\u003C/li>\n\u003Cli>Clear \u003Ccode>overlayDiff\u003C/code>.\u003C/li>\n\u003Cli>Persist empty diff (compaction).\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"rationale\">Rationale\u003C/h2>\n\u003Cp>Comparing arrays each save would be O(n). Maintaining a live diff map keeps mutation cost O(1) and save cost O(diff).\u003C/p>\n\u003Ch2 id=\"edge-cases\">Edge Cases\u003C/h2>\n\u003Cul>\n\u003Cli>Unloaded chunk with pending save: timer triggers save before destruction.\u003C/li>\n\u003Cli>Interrupted save: acceptable risk; next load regenerates baseline, diff missing -> player changes lost only for last unsaved interval.\u003C/li>\n\u003C/ul>",{"headings":202,"localImagePaths":230,"remoteImagePaths":231,"frontmatter":232,"imagePaths":233},[203,206,209,212,215,218,221,224,227],{"depth":29,"slug":204,"text":205},"persistence--diff-format","Persistence & Diff Format",{"depth":32,"slug":207,"text":208},"goals","Goals",{"depth":32,"slug":210,"text":211},"data-flow","Data Flow",{"depth":32,"slug":213,"text":214},"serialized-structure","Serialized Structure",{"depth":32,"slug":216,"text":217},"versioning-strategy","Versioning Strategy",{"depth":32,"slug":219,"text":220},"atomicity--reliability","Atomicity & Reliability",{"depth":32,"slug":222,"text":223},"diff-compaction","Diff Compaction",{"depth":32,"slug":225,"text":226},"rationale","Rationale",{"depth":32,"slug":228,"text":229},"edge-cases","Edge Cases",[],[],{},[],"biomes",{"id":234,"data":236,"body":237,"filePath":238,"digest":239,"rendered":240},{},"# Biomes\n\nThree deterministic biomes are currently implemented:\n\n| Biome  | Kind Description | Tile Rules |\n|--------|------------------|------------|\n| grass  | Green island     | Interior = Grass, edge ring (outer ~10% radius) = Sand, water outside mask |\n| desert | Sandy island     | Land = Sand, water outside mask |\n| snow   | Snow island      | Interior = Snow, edge ring = Sand, water outside mask |\n\n## Selection Algorithm\nBiome chosen per chunk using a hash modulo registry size:\n\n```\nhash = hashString32(`${worldSeed}:${chunkX}:${chunkY}:biome`)\nbiomeIndex = hash % registeredBiomes.length\n```\n\nDeterministic for a given `worldSeed` and coordinates.\n\n## Island Shape\nIsland mask uses radial falloff + multi-scale value noise to produce elevation; `isLand = elevation > -0.05`.\n\n## Edge Ring\nEdge classified where radial falloff > 0.9 producing a sand shoreline for grass & snow biomes.\n\n## Registry\n`biomes.ts` currently registers:\n```ts\ninterface BiomeDefinition { id: string; label: string; kind: 'grass'|'desert'|'snow'; }\n```\nFuture: replace `kind` with richer biome config (palette, decoration rules, spawn tables).\n\n## Future Ideas\n- Matrix-based selection using moisture & temperature noise instead of pure hash.\n- Cross-chunk blending to soften sharp biome borders.\n- Decoration pass (trees, rocks) seeded per chunk for consistent placement.","../../docs/BIOMES.md","beede36d4a51a84f",{"html":241,"metadata":242},"\u003Ch1 id=\"biomes\">Biomes\u003C/h1>\n\u003Cp>Three deterministic biomes are currently implemented:\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Biome\u003C/th>\u003Cth>Kind Description\u003C/th>\u003Cth>Tile Rules\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>grass\u003C/td>\u003Ctd>Green island\u003C/td>\u003Ctd>Interior = Grass, edge ring (outer ~10% radius) = Sand, water outside mask\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>desert\u003C/td>\u003Ctd>Sandy island\u003C/td>\u003Ctd>Land = Sand, water outside mask\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>snow\u003C/td>\u003Ctd>Snow island\u003C/td>\u003Ctd>Interior = Snow, edge ring = Sand, water outside mask\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"selection-algorithm\">Selection Algorithm\u003C/h2>\n\u003Cp>Biome chosen per chunk using a hash modulo registry size:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>hash = hashString32(`${worldSeed}:${chunkX}:${chunkY}:biome`)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>biomeIndex = hash % registeredBiomes.length\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Deterministic for a given \u003Ccode>worldSeed\u003C/code> and coordinates.\u003C/p>\n\u003Ch2 id=\"island-shape\">Island Shape\u003C/h2>\n\u003Cp>Island mask uses radial falloff + multi-scale value noise to produce elevation; \u003Ccode>isLand = elevation > -0.05\u003C/code>.\u003C/p>\n\u003Ch2 id=\"edge-ring\">Edge Ring\u003C/h2>\n\u003Cp>Edge classified where radial falloff > 0.9 producing a sand shoreline for grass &#x26; snow biomes.\u003C/p>\n\u003Ch2 id=\"registry\">Registry\u003C/h2>\n\u003Cp>\u003Ccode>biomes.ts\u003C/code> currently registers:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> BiomeDefinition\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">label\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">kind\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'grass'\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'desert'\u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'snow'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Future: replace \u003Ccode>kind\u003C/code> with richer biome config (palette, decoration rules, spawn tables).\u003C/p>\n\u003Ch2 id=\"future-ideas\">Future Ideas\u003C/h2>\n\u003Cul>\n\u003Cli>Matrix-based selection using moisture &#x26; temperature noise instead of pure hash.\u003C/li>\n\u003Cli>Cross-chunk blending to soften sharp biome borders.\u003C/li>\n\u003Cli>Decoration pass (trees, rocks) seeded per chunk for consistent placement.\u003C/li>\n\u003C/ul>",{"headings":243,"localImagePaths":261,"remoteImagePaths":262,"frontmatter":263,"imagePaths":264},[244,246,249,252,255,258],{"depth":29,"slug":234,"text":245},"Biomes",{"depth":32,"slug":247,"text":248},"selection-algorithm","Selection Algorithm",{"depth":32,"slug":250,"text":251},"island-shape","Island Shape",{"depth":32,"slug":253,"text":254},"edge-ring","Edge Ring",{"depth":32,"slug":256,"text":257},"registry","Registry",{"depth":32,"slug":259,"text":260},"future-ideas","Future Ideas",[],[],{},[],"crafting",{"id":265,"data":267,"body":268,"filePath":269,"digest":270,"rendered":271},{},"## Colored Sand Crafting System\n\n### Status\nDesign Phase ‚Äì Implementation pending (inventory removal helpers, crafting module, HUD modal, tests). This document defines the initial crafting feature focused on converting base sand (Yellow) plus a single flower into colored sand blocks. Keeps HUD minimal by using a modal opened from a dedicated HudOption.\n\n---\n\n## 1. Goals\n\n1. Enable players to transform Yellow sand blocks into colored sand variants using flowers.\n2. Maintain a minimal HUD: crafting interaction lives inside a modal invoked by a single HudOption icon.\n3. Guarantee atomic crafting transactions (all inputs consumed only if outputs can be fully added to inventory).\n4. Provide deterministic distribution for mixed output recipes (red flower 50/50 split) for predictable player experience.\n5. Avoid clutter: flowers remain a hidden resource except aggregate count badge and crafting modal.\n\nNon-goals (first iteration): batch multi-flower recipes, partial output on inventory overflow, asynchronous crafting timers, animation/sound polish, recipe discovery mechanics.\n\n---\n\n## 2. Terminology\n\n| Term | Meaning |\n|------|---------|\n| Flower | A collected object (ObjectId) with id starting `flower_`. Consumed as catalyst. |\n| Sand (Base) | The Yellow block (`assets.blocks.sprites.Yellow`) used as input. |\n| Colored Sand | Output blocks (Red, LightRed, LightCyan, Cyan (Turquoise fallback), Blue, Magenta, LightMagenta). |\n| Crafting Transaction | Single action consuming 1 flower + N base sand (1..10) producing N colored sand blocks. |\n| Recipe | Mapping flower id -> output distribution rule. |\n\n---\n\n## 3. Input / Output Contract\n\nContract (single craft operation):\n- Inputs: exactly 1 flower object + `n` Yellow sand blocks where `1 \u003C= n \u003C= 10` and inventory holds at least `n` Yellow.\n- Output count: exactly `n` blocks (one-for-one conversion, no multiplier).\n- Output kind distribution per flower:\n  - `flower_red` -> 50% Red, 50% LightRed (odd counts: extra goes to Red first)  \n  - `flower_cyan` -> 100% LightCyan  \n  - `flower_turquoise` -> 100% Cyan  \n  - `flower_blue` -> 100% Blue  \n  - `flower_purple` -> 100% Magenta  \n  - `flower_pink` -> 100% LightMagenta  \n\nFailure Modes:\n- No eligible flower selected ‚Üí UI disables craft button.\n- Sand amount zero ‚Üí UI disables craft button.\n- Insufficient Yellow sand ‚Üí UI disables craft button.\n- Inventory does not have space for all output stacks ‚Üí transaction aborted, show error.\n\nAtomicity: On success remove 1 flower + `n` Yellow, then add output blocks. If any addition fails mid-way, rollback (re-add removed inputs) and present failure message.\n\n---\n\n## 4. Recipes Data Structure\n\n```ts\ninterface CraftRecipe {\n  id: ObjectId;                 // flower id\n  distribute(n: number): { block: Block; count: number }[]; // deterministic\n  description: string;          // shown in modal\n}\n```\n\nImplementation details:\n- Use a recipe map keyed by flower id.\n- For mixed distribution (red) implement integer split: `Math.floor(n/2)` LightRed, remainder Red.\n\n---\n\n## 5. Inventory API Additions\n\nNew methods required:\n```ts\nremoveBlock(block: Block, count: number): boolean;      // all-or-nothing\nremoveObject(id: ObjectId, count?: number): boolean;     // default count=1\naddMany(block: Block, count: number): boolean;          // treat stacks; returns false if cannot add all\n```\nRollback helper could snapshot affected slots or perform inverse operations immediately if failure occurs during output addition.\n\n---\n\n## 6. Crafting Module (`Crafting.ts`)\n\nResponsibilities:\n- Validation (`validateCraft(flowerId, sandCount, inventory)`)\n- Simulation (`simulate(flowerId, sandCount)` returns distribution for preview)\n- Execution (`executeCraft(flowerId, sandCount, inventory)` returns result object `{ ok, outputs, error? }`)\n\nPseudo-code:\n```ts\nfunction executeCraft(flowerId: ObjectId, n: number, inv: Inventory): CraftResult {\n  const recipe = RECIPES[flowerId];\n  if (!recipe) return { ok: false, error: 'Unknown recipe' };\n  if (n \u003C 1 || n > 10) return { ok: false, error: 'Invalid sand amount' };\n  if (!inv.has(Yellow) || inv.count(Yellow) \u003C n) return { ok: false, error: 'Not enough sand' };\n  if (!inv.hasObject(flowerId)) return { ok: false, error: 'Flower missing' };\n  const outputs = recipe.distribute(n);\n  // Check capacity\n  if (!canAddAll(inv, outputs)) return { ok: false, error: 'Inventory full' };\n  // Apply (atomic)\n  inv.removeObject(flowerId);\n  inv.removeBlock(Yellow, n);\n  if (!addAll(inv, outputs)) {\n    // rollback\n    inv.addObject(flowerId);\n    inv.addMany(Yellow, n);\n    return { ok: false, error: 'Inventory overflow during add' };\n  }\n  return { ok: true, outputs };\n}\n```\n\n---\n\n## 7. HUD & Modal Integration\n\nHUD Changes:\n- Add new HudOption (\"craft\") with beaker icon ‚öóÔ∏è.\n- Clicking it toggles `\u003Ccraft-modal>` (overlay panel centered).\n\nModal `\u003Ccraft-modal>`:\n- Flower selection (sprite icons with counts; click to select a flower catalyst).\n- Sand amount selector (range 1..10 clamped by available Yellow count).\n- Live preview of output distribution (colored block icons + counts).\n- Craft button (HudOption styling) disabled until valid; shows reason in `title` attribute.\n- Close controls: ESC key, backdrop click, or success.\n\nMinimalism: Modal only appears when actively crafting; HUD itself adds exactly one icon. No persistent extra panels.\n\n---\n\n## 8. UI States & Feedback\n\nStates:\n1. Empty (no flowers) ‚Üí message \"No flowers collected\"; craft disabled.\n2. Insufficient sand ‚Üí display current vs required.\n3. Overflow risk ‚Üí message advising freeing inventory space.\n4. Success ‚Üí transient confirmation (e.g. fade-out toast) then modal auto-closes.\n\nAccessibility Considerations: Use semantic buttons, focus first interactive element, ESC to close, ARIA role `dialog` with `aria-modal=\"true\"`.\n\n---\n\n## 9. Testing Strategy\n\nUnit Tests (Vitest):\n- Red recipe splitting even/odd counts.\n- Each 100% recipe outputs correct block id and count.\n- Blocked yellow flower returns error; inventory unaffected.\n- Insufficient sand count error.\n- Inventory space failure triggers rollback (flower + sand unchanged).\n- Maximum sand (10) success path.\n\nIntegration-esque:\n- Simulate inventory with multiple flowers & sand; execute craft; ensure HUD update call expected.\n\nEdge Cases:\n- Sand count exactly matches remaining stack capacity for output blocks.\n- Inventory nearly full (adding outputs require new slot vs merge).\n\n---\n\n## 10. Performance & Limits\n\n- Max sand per craft: 10 (tiny scope ‚Üí negligible performance impact).\n- Distribution function O(1) per output kind (worst-case 2 entries for red split).\n- Modal instantiation on demand; no persistent interval updates.\n\n---\n\n## 11. Future Enhancements\n\n| Idea | Description |\n|------|-------------|\n| DarkCyan Asset | Add new block sprite enabling distinct turquoise output. |\n| Multi-Flower Boost | More flowers => multiplier (e.g., 1 flower + 10 sand ‚Üí 12 colored). |\n| Discovery System | Unlock recipes on first flower collection. |\n| Craft Queue | Batch multiple crafts before closing modal. |\n| Particle Effects | Sand tinting animation during craft. |\n| Sound Feedback | Success / failure audio cues. |\n\n---\n\n## 12. Open Questions\n\n1. Should sand amount 0 be allowed for preview only? (Currently disallow.)\n2. Rollback strategy acceptable or should we pre-check slot capacity more deeply to avoid partial add attempts?\n\n---\n\n## 13. Implementation Checklist\n\n```\n1. [x] Extend Inventory (removeBlock, removeObject, addMany, hasObject, count helpers)\n2. [x] Add 'craft' to Option union & HUD icon\n3. [x] Create Crafting.ts (recipes, simulate, execute)\n4. [x] Implement \u003Ccraft-modal> custom element\n5. [x] Integrate HUD option toggling modal\n6. [x] Wire CraftResult HUD refresh workflow\n7. [x] Add unit tests for crafting logic\n8. [x] Update COLLECTIBLES.md (link to crafting doc) or cross-reference\n9. [ ] Optional: toast feedback on success/failure\n```\n\n---\n\n## 14. Quick Reference\n\n| Concern | Location |\n|---------|----------|\n| Recipes Map | `Crafting.ts` RECIPES constant |\n| Yellow block id | `assets.blocks.sprites.Yellow` |\n| Flower ids | `assets.objects.sprites.*` with `flower_` prefix |\n| Modal element | `\u003Ccraft-modal>` (shadow DOM recommended) |\n| Execution entry | `executeCraft()` |\n\n---\n\nEnd of design.","../../docs/CRAFTING.md","66b38d66aa912b3a",{"html":272,"metadata":273},"\u003Ch2 id=\"colored-sand-crafting-system\">Colored Sand Crafting System\u003C/h2>\n\u003Ch3 id=\"status\">Status\u003C/h3>\n\u003Cp>Design Phase ‚Äì Implementation pending (inventory removal helpers, crafting module, HUD modal, tests). This document defines the initial crafting feature focused on converting base sand (Yellow) plus a single flower into colored sand blocks. Keeps HUD minimal by using a modal opened from a dedicated HudOption.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"1-goals\">1. Goals\u003C/h2>\n\u003Col>\n\u003Cli>Enable players to transform Yellow sand blocks into colored sand variants using flowers.\u003C/li>\n\u003Cli>Maintain a minimal HUD: crafting interaction lives inside a modal invoked by a single HudOption icon.\u003C/li>\n\u003Cli>Guarantee atomic crafting transactions (all inputs consumed only if outputs can be fully added to inventory).\u003C/li>\n\u003Cli>Provide deterministic distribution for mixed output recipes (red flower 50/50 split) for predictable player experience.\u003C/li>\n\u003Cli>Avoid clutter: flowers remain a hidden resource except aggregate count badge and crafting modal.\u003C/li>\n\u003C/ol>\n\u003Cp>Non-goals (first iteration): batch multi-flower recipes, partial output on inventory overflow, asynchronous crafting timers, animation/sound polish, recipe discovery mechanics.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"2-terminology\">2. Terminology\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Term\u003C/th>\u003Cth>Meaning\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Flower\u003C/td>\u003Ctd>A collected object (ObjectId) with id starting \u003Ccode>flower_\u003C/code>. Consumed as catalyst.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Sand (Base)\u003C/td>\u003Ctd>The Yellow block (\u003Ccode>assets.blocks.sprites.Yellow\u003C/code>) used as input.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Colored Sand\u003C/td>\u003Ctd>Output blocks (Red, LightRed, LightCyan, Cyan (Turquoise fallback), Blue, Magenta, LightMagenta).\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Crafting Transaction\u003C/td>\u003Ctd>Single action consuming 1 flower + N base sand (1..10) producing N colored sand blocks.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Recipe\u003C/td>\u003Ctd>Mapping flower id -> output distribution rule.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Chr>\n\u003Ch2 id=\"3-input--output-contract\">3. Input / Output Contract\u003C/h2>\n\u003Cp>Contract (single craft operation):\u003C/p>\n\u003Cul>\n\u003Cli>Inputs: exactly 1 flower object + \u003Ccode>n\u003C/code> Yellow sand blocks where \u003Ccode>1 &#x3C;= n &#x3C;= 10\u003C/code> and inventory holds at least \u003Ccode>n\u003C/code> Yellow.\u003C/li>\n\u003Cli>Output count: exactly \u003Ccode>n\u003C/code> blocks (one-for-one conversion, no multiplier).\u003C/li>\n\u003Cli>Output kind distribution per flower:\n\u003Cul>\n\u003Cli>\u003Ccode>flower_red\u003C/code> -> 50% Red, 50% LightRed (odd counts: extra goes to Red first)\u003C/li>\n\u003Cli>\u003Ccode>flower_cyan\u003C/code> -> 100% LightCyan\u003C/li>\n\u003Cli>\u003Ccode>flower_turquoise\u003C/code> -> 100% Cyan\u003C/li>\n\u003Cli>\u003Ccode>flower_blue\u003C/code> -> 100% Blue\u003C/li>\n\u003Cli>\u003Ccode>flower_purple\u003C/code> -> 100% Magenta\u003C/li>\n\u003Cli>\u003Ccode>flower_pink\u003C/code> -> 100% LightMagenta\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Failure Modes:\u003C/p>\n\u003Cul>\n\u003Cli>No eligible flower selected ‚Üí UI disables craft button.\u003C/li>\n\u003Cli>Sand amount zero ‚Üí UI disables craft button.\u003C/li>\n\u003Cli>Insufficient Yellow sand ‚Üí UI disables craft button.\u003C/li>\n\u003Cli>Inventory does not have space for all output stacks ‚Üí transaction aborted, show error.\u003C/li>\n\u003C/ul>\n\u003Cp>Atomicity: On success remove 1 flower + \u003Ccode>n\u003C/code> Yellow, then add output blocks. If any addition fails mid-way, rollback (re-add removed inputs) and present failure message.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"4-recipes-data-structure\">4. Recipes Data Structure\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> CraftRecipe\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ObjectId\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;                 \u003C/span>\u003Cspan style=\"color:#6A737D\">// flower id\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  distribute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">n\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">block\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Block\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">count\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }[]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// deterministic\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  description\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;          \u003C/span>\u003Cspan style=\"color:#6A737D\">// shown in modal\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Implementation details:\u003C/p>\n\u003Cul>\n\u003Cli>Use a recipe map keyed by flower id.\u003C/li>\n\u003Cli>For mixed distribution (red) implement integer split: \u003Ccode>Math.floor(n/2)\u003C/code> LightRed, remainder Red.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"5-inventory-api-additions\">5. Inventory API Additions\u003C/h2>\n\u003Cp>New methods required:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">removeBlock\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(block: Block, count: number): boolean;      \u003C/span>\u003Cspan style=\"color:#6A737D\">// all-or-nothing\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">removeObject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(id: ObjectId, count\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> number): boolean;     \u003C/span>\u003Cspan style=\"color:#6A737D\">// default count=1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">addMany\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(block: Block, count: number): boolean;          \u003C/span>\u003Cspan style=\"color:#6A737D\">// treat stacks; returns false if cannot add all\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Rollback helper could snapshot affected slots or perform inverse operations immediately if failure occurs during output addition.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"6-crafting-module-craftingts\">6. Crafting Module (\u003Ccode>Crafting.ts\u003C/code>)\u003C/h2>\n\u003Cp>Responsibilities:\u003C/p>\n\u003Cul>\n\u003Cli>Validation (\u003Ccode>validateCraft(flowerId, sandCount, inventory)\u003C/code>)\u003C/li>\n\u003Cli>Simulation (\u003Ccode>simulate(flowerId, sandCount)\u003C/code> returns distribution for preview)\u003C/li>\n\u003Cli>Execution (\u003Ccode>executeCraft(flowerId, sandCount, inventory)\u003C/code> returns result object \u003Ccode>{ ok, outputs, error? }\u003C/code>)\u003C/li>\n\u003C/ul>\n\u003Cp>Pseudo-code:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> executeCraft\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">flowerId\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ObjectId\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">n\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">inv\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Inventory\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> CraftResult\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> recipe\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> RECIPES\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[flowerId];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">recipe) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { ok: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Unknown recipe'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { ok: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Invalid sand amount'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">inv.\u003C/span>\u003Cspan style=\"color:#B392F0\">has\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Yellow) \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> inv.\u003C/span>\u003Cspan style=\"color:#B392F0\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Yellow) \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { ok: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Not enough sand'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">inv.\u003C/span>\u003Cspan style=\"color:#B392F0\">hasObject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(flowerId)) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { ok: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Flower missing'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> outputs\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> recipe.\u003C/span>\u003Cspan style=\"color:#B392F0\">distribute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Check capacity\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#B392F0\">canAddAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(inv, outputs)) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { ok: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Inventory full'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Apply (atomic)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  inv.\u003C/span>\u003Cspan style=\"color:#B392F0\">removeObject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(flowerId);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  inv.\u003C/span>\u003Cspan style=\"color:#B392F0\">removeBlock\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Yellow, n);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#B392F0\">addAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(inv, outputs)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // rollback\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    inv.\u003C/span>\u003Cspan style=\"color:#B392F0\">addObject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(flowerId);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    inv.\u003C/span>\u003Cspan style=\"color:#B392F0\">addMany\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Yellow, n);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { ok: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Inventory overflow during add'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { ok: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, outputs };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"7-hud--modal-integration\">7. HUD &#x26; Modal Integration\u003C/h2>\n\u003Cp>HUD Changes:\u003C/p>\n\u003Cul>\n\u003Cli>Add new HudOption (‚Äúcraft‚Äù) with beaker icon ‚öóÔ∏è.\u003C/li>\n\u003Cli>Clicking it toggles \u003Ccode>&#x3C;craft-modal>\u003C/code> (overlay panel centered).\u003C/li>\n\u003C/ul>\n\u003Cp>Modal \u003Ccode>&#x3C;craft-modal>\u003C/code>:\u003C/p>\n\u003Cul>\n\u003Cli>Flower selection (sprite icons with counts; click to select a flower catalyst).\u003C/li>\n\u003Cli>Sand amount selector (range 1..10 clamped by available Yellow count).\u003C/li>\n\u003Cli>Live preview of output distribution (colored block icons + counts).\u003C/li>\n\u003Cli>Craft button (HudOption styling) disabled until valid; shows reason in \u003Ccode>title\u003C/code> attribute.\u003C/li>\n\u003Cli>Close controls: ESC key, backdrop click, or success.\u003C/li>\n\u003C/ul>\n\u003Cp>Minimalism: Modal only appears when actively crafting; HUD itself adds exactly one icon. No persistent extra panels.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"8-ui-states--feedback\">8. UI States &#x26; Feedback\u003C/h2>\n\u003Cp>States:\u003C/p>\n\u003Col>\n\u003Cli>Empty (no flowers) ‚Üí message ‚ÄúNo flowers collected‚Äù; craft disabled.\u003C/li>\n\u003Cli>Insufficient sand ‚Üí display current vs required.\u003C/li>\n\u003Cli>Overflow risk ‚Üí message advising freeing inventory space.\u003C/li>\n\u003Cli>Success ‚Üí transient confirmation (e.g. fade-out toast) then modal auto-closes.\u003C/li>\n\u003C/ol>\n\u003Cp>Accessibility Considerations: Use semantic buttons, focus first interactive element, ESC to close, ARIA role \u003Ccode>dialog\u003C/code> with \u003Ccode>aria-modal=\"true\"\u003C/code>.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"9-testing-strategy\">9. Testing Strategy\u003C/h2>\n\u003Cp>Unit Tests (Vitest):\u003C/p>\n\u003Cul>\n\u003Cli>Red recipe splitting even/odd counts.\u003C/li>\n\u003Cli>Each 100% recipe outputs correct block id and count.\u003C/li>\n\u003Cli>Blocked yellow flower returns error; inventory unaffected.\u003C/li>\n\u003Cli>Insufficient sand count error.\u003C/li>\n\u003Cli>Inventory space failure triggers rollback (flower + sand unchanged).\u003C/li>\n\u003Cli>Maximum sand (10) success path.\u003C/li>\n\u003C/ul>\n\u003Cp>Integration-esque:\u003C/p>\n\u003Cul>\n\u003Cli>Simulate inventory with multiple flowers &#x26; sand; execute craft; ensure HUD update call expected.\u003C/li>\n\u003C/ul>\n\u003Cp>Edge Cases:\u003C/p>\n\u003Cul>\n\u003Cli>Sand count exactly matches remaining stack capacity for output blocks.\u003C/li>\n\u003Cli>Inventory nearly full (adding outputs require new slot vs merge).\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"10-performance--limits\">10. Performance &#x26; Limits\u003C/h2>\n\u003Cul>\n\u003Cli>Max sand per craft: 10 (tiny scope ‚Üí negligible performance impact).\u003C/li>\n\u003Cli>Distribution function O(1) per output kind (worst-case 2 entries for red split).\u003C/li>\n\u003Cli>Modal instantiation on demand; no persistent interval updates.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"11-future-enhancements\">11. Future Enhancements\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Idea\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>DarkCyan Asset\u003C/td>\u003Ctd>Add new block sprite enabling distinct turquoise output.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Multi-Flower Boost\u003C/td>\u003Ctd>More flowers => multiplier (e.g., 1 flower + 10 sand ‚Üí 12 colored).\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Discovery System\u003C/td>\u003Ctd>Unlock recipes on first flower collection.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Craft Queue\u003C/td>\u003Ctd>Batch multiple crafts before closing modal.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Particle Effects\u003C/td>\u003Ctd>Sand tinting animation during craft.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Sound Feedback\u003C/td>\u003Ctd>Success / failure audio cues.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Chr>\n\u003Ch2 id=\"12-open-questions\">12. Open Questions\u003C/h2>\n\u003Col>\n\u003Cli>Should sand amount 0 be allowed for preview only? (Currently disallow.)\u003C/li>\n\u003Cli>Rollback strategy acceptable or should we pre-check slot capacity more deeply to avoid partial add attempts?\u003C/li>\n\u003C/ol>\n\u003Chr>\n\u003Ch2 id=\"13-implementation-checklist\">13. Implementation Checklist\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>1. [x] Extend Inventory (removeBlock, removeObject, addMany, hasObject, count helpers)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>2. [x] Add 'craft' to Option union &#x26; HUD icon\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3. [x] Create Crafting.ts (recipes, simulate, execute)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>4. [x] Implement &#x3C;craft-modal> custom element\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>5. [x] Integrate HUD option toggling modal\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6. [x] Wire CraftResult HUD refresh workflow\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>7. [x] Add unit tests for crafting logic\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>8. [x] Update COLLECTIBLES.md (link to crafting doc) or cross-reference\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>9. [ ] Optional: toast feedback on success/failure\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"14-quick-reference\">14. Quick Reference\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Concern\u003C/th>\u003Cth>Location\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Recipes Map\u003C/td>\u003Ctd>\u003Ccode>Crafting.ts\u003C/code> RECIPES constant\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Yellow block id\u003C/td>\u003Ctd>\u003Ccode>assets.blocks.sprites.Yellow\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Flower ids\u003C/td>\u003Ctd>\u003Ccode>assets.objects.sprites.*\u003C/code> with \u003Ccode>flower_\u003C/code> prefix\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Modal element\u003C/td>\u003Ctd>\u003Ccode>&#x3C;craft-modal>\u003C/code> (shadow DOM recommended)\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Execution entry\u003C/td>\u003Ctd>\u003Ccode>executeCraft()\u003C/code>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Chr>\n\u003Cp>End of design.\u003C/p>",{"headings":274,"localImagePaths":323,"remoteImagePaths":324,"frontmatter":325,"imagePaths":326},[275,278,281,284,287,290,293,296,299,302,305,308,311,314,317,320],{"depth":32,"slug":276,"text":277},"colored-sand-crafting-system","Colored Sand Crafting System",{"depth":45,"slug":279,"text":280},"status","Status",{"depth":32,"slug":282,"text":283},"1-goals","1. Goals",{"depth":32,"slug":285,"text":286},"2-terminology","2. Terminology",{"depth":32,"slug":288,"text":289},"3-input--output-contract","3. Input / Output Contract",{"depth":32,"slug":291,"text":292},"4-recipes-data-structure","4. Recipes Data Structure",{"depth":32,"slug":294,"text":295},"5-inventory-api-additions","5. Inventory API Additions",{"depth":32,"slug":297,"text":298},"6-crafting-module-craftingts","6. Crafting Module (Crafting.ts)",{"depth":32,"slug":300,"text":301},"7-hud--modal-integration","7. HUD & Modal Integration",{"depth":32,"slug":303,"text":304},"8-ui-states--feedback","8. UI States & Feedback",{"depth":32,"slug":306,"text":307},"9-testing-strategy","9. Testing Strategy",{"depth":32,"slug":309,"text":310},"10-performance--limits","10. Performance & Limits",{"depth":32,"slug":312,"text":313},"11-future-enhancements","11. Future Enhancements",{"depth":32,"slug":315,"text":316},"12-open-questions","12. Open Questions",{"depth":32,"slug":318,"text":319},"13-implementation-checklist","13. Implementation Checklist",{"depth":32,"slug":321,"text":322},"14-quick-reference","14. Quick Reference",[],[],{},[],"collectibles",{"id":327,"data":329,"body":330,"filePath":331,"digest":332,"rendered":333},{},"## Collectible Objects (Flowers & Future Resources)\n\n### Status\nIn Progress ‚Äì Steps 1‚Äì12 implemented & tested (types, persistence, generation, rendering, object-first collection, HUD badge, density & biome tests, collection & persistence tests). This update adds cross-references to the colored sand crafting system. Remaining: Step 14 (manual QA & tuning), future crafting & enhancements.\n\nQuick Links: [Colored Sand Crafting System](./CRAFTING.md) ‚Äì see design & recipes.\n\n---\n\n## 1. Goals\n\n1. Procedurally distribute flower objects on grass-biome islands (per chunk).\n2. Player collection prioritizes an object (flower) over ground tile mutation when present.\n3. Collected flower:\n   - Added to inventory (stacking logic similar to blocks, but as a distinct item kind).\n   - Removed visually and from world state.\n4. Flower presence / absence persists (survives reload) just like mutated tiles.\n5. Keep architecture forward-compatible for additional object types (rocks) and richer metadata (durability, growth, etc.).\n\nNon-goals (for this first pass): regrowth, tool requirements, animation, deterministic baseline diff compression (we store full object list initially), multi-layer pathfinding interactions.\n\n---\n\n## 2. Terminology\n\n| Term | Meaning |\n|------|---------|\n| Tile | Terrain base (numeric ID sourced from `assets.blocks.sprites`). |\n| Object | A collectible entity placed \"on\" a tile (flower, rock). Not encoded as tile ID. |\n| Chunk | 100√ó100 tile region (see `CHUNK_TILES`). Owns tiles + objects. |\n| Overlay Diff | Sparse tile mutations relative to baseline. |\n\n---\n\n## 3. Data Model Additions\n\n```ts\n// Object identity (matches frame names in objects atlas)\ntype ObjectId =\n  | 'flower_red' | 'flower_cyan'\n  | 'flower_turquoise' | 'flower_blue' | 'flower_purple' | 'flower_pink'\n  // (rocks reserved for later)\n  ;\ninterface WorldObject {\n  id: ObjectId;          // atlas frame key\n  i: number;             // linear tile index (tx + ty * CHUNK_TILES)\n  sprite: Phaser.GameObjects.Image; // runtime only (not serialized)\n}\n\ninterface SerializedObjectEntry {\n  i: number;  // linear tile index\n  k: ObjectId; // kind / frame key\n}\n\ninterface SerializedChunk {\n  ...\n  objects?: SerializedObjectEntry[]; // Optional full snapshot (first implementation)\n}\n\n// Inventory\ntype InventoryItem =\n  | { kind: 'block'; id: Block; count: number }\n  | { kind: 'object'; id: ObjectId; count: number };\n```\n\nRationale: Keep initial persistence simple (complete object list) ‚Üí easier to reason about, small size (expected dozens max per chunk). Can evolve to diff-of-removals later if a deterministic baseline for objects is introduced.\n\n---\n\n## 4. Procedural Generation (Flowers)\n\nGeneration occurs inside `World.generateIsland()` (or a new helper invoked after tile generation) only if the biome kind is `grass`.\n\nAlgorithm:\n1. Inspect all tiles after base land generation.\n2. For each grass tile (not sand/water), with probability `p = 1 / FLOWER_DENSITY_DIVISOR` attempt placement.\n3. Randomly choose a flower variant with uniform distribution across available frames.\n4. Ensure no duplicate object already at that index.\n5. Store as `WorldObject` (create sprite) and append to internal object map.\n\nConstants (add to `constants.ts` or a new config file):\n```ts\nexport const FLOWER_DENSITY_DIVISOR = 100;  // tuned from 140 (Step 14) to raise average flower count\nexport const OBJECT_DEPTH = 0.5;            // draw order (ground=0, objects=0.5, player=1, highlight=10)\n```\n\nDeterminism: Use the existing per-chunk RNG (`mulberry32(seed)`) so flower placement is predictable. Because we are *persisting* the full object list, determinism is nice but not strictly required for correctness now; it *will* matter if/when we switch to diff-of-removals.\n\n---\n\n## 5. World Integration\n\nAdd to `World`:\n```ts\nprivate objects: Map\u003Cnumber, WorldObject> = new Map();\n\naddObject(id: ObjectId, tx: number, ty: number): void;\ngetObjectAt(tx: number, ty: number): WorldObject | null;\nremoveObjectAt(tx: number, ty: number): boolean; // returns true if removed\n\nserializeObjects(): SerializedObjectEntry[];\napplySerializedObjects(list: SerializedObjectEntry[]): void;\n```\n\nRendering: Each object -> `this.shell.add.image(offsetX + tx*TILE_SIZE + TILE_SIZE/2, offsetY + ty*TILE_SIZE + TILE_SIZE/2, assets.objects.key, id)` with `setDepth(OBJECT_DEPTH)`. Destroy sprite when object removed or chunk destroyed.\n\nPersistence hooks:\n* Include `objects` array inside `serializeDiff` return value.\n* In `WorldManager.loadExisting`, after applying tile diff, if `data.objects` present ‚Üí call `applySerializedObjects`.\n* Any add/remove triggers `onMutate()` so chunk save scheduling includes object changes.\n\nBackward compatibility: Old saved chunks without `objects` simply load with none (fine). New code must tolerate `objects` missing.\n\n---\n\n## 6. WorldManager Helpers\n\nAdd convenience methods for global coordinates:\n```ts\ngetObjectAtGlobal(tileX: number, tileY: number): WorldObject | null;\nremoveObjectAtGlobal(tileX: number, tileY: number): boolean;\n```\nThese mirror existing tile helpers and translate global tile coordinates to chunk-local indices.\n\n---\n\n## 7. Collection Flow Changes\n\nAmend `CollectMode.finishCollection(tx, ty)` logic:\n1. Query `worldManager.getObjectAtGlobal(tx, ty)`.\n2. If found:\n   - Attempt `inventory.addObject(obj.id)`.\n   - If added, `worldManager.removeObjectAtGlobal(tx, ty)` and HUD refresh.\n   - Return early (skip tile mutation logic).\n3. Else run existing tile collection logic (tile transforms + adding block to inventory).\n\nCollection time: unchanged (1s). Possible future variation per object.\n\n---\n\n## 8. Inventory & HUD Adjustments\n\nInventory changes:\n* Internally store entries as `InventoryItem` union (already partially implemented).\n* Expose existing block-centric APIs unchanged for now.\n* Flowers (object items) are collected and stacked but are NOT rendered in the block HUD bar ‚Äì they remain hidden resources.\n\nHUD decision (updated):\n* Do not add flower icons to the primary block slot strip to avoid clutter.\n* Future interaction: a crafting / combination UI (not yet implemented) will allow combining a flower with sand blocks to produce colored sand variants. This will consume one flower per batch (design TBD) and tint or swap sand block tiles.\n\nBackward compatibility: Since HUD ignores object entries, no immediate visual migration needed. Later, a secondary panel or context menu can expose flower counts when the combination feature is introduced.\n\n---\n\n## 9. Persistence Format Example\n\n```jsonc\n{\n  \"version\": 1,\n  \"worldSeed\": \"local-seed\",\n  \"chunkX\": 0,\n  \"chunkY\": 0,\n  \"biomeId\": \"grass\",\n  \"diff\": [ { \"i\": 5050, \"t\": 11 } ],\n  \"objects\": [\n    { \"i\": 4321, \"k\": \"flower_red\" },\n    { \"i\": 7890, \"k\": \"flower_blue\" }\n  ],\n  \"lastTouched\": 1730000000000\n}\n```\n\nIf `objects` absent, treat as empty list.\n\n---\n\n## 10. Testing Strategy\n\nUnit / Integration tests (place in `proc/` or new test file):\n1. Generation Density: For a grass biome chunk, count flowers; assert within expected bounds (e.g., 0 \u003C count \u003C CHUNK_TILES*CHUNK_TILES / FLOWER_DENSITY_DIVISOR * 2).\n2. Biome Restriction: Desert / snow biome chunks either produce zero flowers.\n3. Collection: Simulate adding a flower at tile, collect ‚Üí inventory increments, object removed, tile unchanged.\n4. Persistence: After removal, serialize + reload (apply diff & objects) ‚Üí ensure flower not present.\n5. Backward Compatibility: Loading a serialized chunk without `objects` does not throw.\n\nEdge cases (manual QA):\n* Collect while moving across chunk boundary.\n* Collecting multiple flowers quickly (inventory stacking works, no duplicates remain in world).\n* Saving & reloading with mixed tile mutations and object removals.\n\n---\n\n## 11. Performance Considerations\n\n* Expected flower count per chunk is small (\u003C ~80 @ current density). Full list serialization negligible.\n* Object lookups use a `Map\u003Cnumber,WorldObject>` O(1).\n* Save size overhead: each object entry ~ (index + small string) ‚Äì acceptable; could compress later.\n* Future optimization: store baseline deterministic placement and only track removals to reduce I/O.\n\n---\n\n## 12. Future Enhancements (Not in First Pass)\n\n* Rocks with longer collection times or tool gating.\n* Object-specific animations / particle effects on collection.\n* Regrowth timers or seasonal generation refresh.\n* Deterministic baseline + diff-of-removals for compact saves.\n* Object metadata (durability, growth s\n* tage) via `SerializedTileMetaEntry` or a parallel `objectsMeta` extension.\n* Pathfinding collision if certain objects become blocking.\n\n---\n\n## 13. Implementation Checklist\n\n```\n1. [x] Extend types: ObjectId, InventoryItem, SerializedObjectEntry\n2. [x] Update IChunkStore interfaces & version note (optional objects[] field)\n3. [x] Add object container & API to World (add/get/remove, serialize/apply)\n4. [x] Procedural flower generation (grass biome only) with density constant\n5. [x] Rendering for objects (depth ordering) & cleanup on destroy\n6. [x] WorldManager global helpers (get/remove object at global coords)\n7. [x] Modify CollectMode to prioritize object collection\n8. [x] Refactor Inventory for union item kind (block/object) & stacking rules\n9. [x] Minimal HUD integration (aggregate flower count badge on collect icon; full crafting UI deferred)\n10. [x] Persistence wiring (save & load objects field) ‚Äì verify saves include removals\n11. [x] Tests: generation density + biome restriction\n12. [x] Tests: collection flow & persistence\n13. [x] Documentation updates (this file ‚Äì keep in sync if design shifts)\n14. [ ] Manual QA & tuning (flower density, visual overlap)\n```\n\n---\n\n## 14. Risks & Mitigations\n\n| Risk | Mitigation |\n|------|------------|\n| Inventory / HUD break due to new union type | Introduce adapters; keep old code paths until fully migrated. |\n| Save incompatibility | Optional `objects` field guarded by presence checks. |\n| Visual clutter / performance with too many objects | Density constant tweak; future culling if needed. |\n| Hidden resource confusion (flowers not visible in HUD) | Add future crafting/combo panel listing flower counts. |\n| Future diff optimization complexity | Keep simple full snapshot now; encapsulate serialization for easy swap later. |\n\n---\n\n## 15. Quick Reference (Dev Cheatsheet)\n\n| Concern | Location / Action |\n|---------|-------------------|\n| Add new object kind | Append frame to objects atlas + extend `ObjectId` union. |\n| Force re-gen (dev) | Clear IndexedDB chunk keys or change world seed. |\n| Adjust density | `FLOWER_DENSITY_DIVISOR` constant. |\n| Rendering order | `OBJECT_DEPTH` constant (objects 0.5 \u003C player 1). |\n\n---\n\n## 16. Open Questions (Track & Resolve Before Expanding to Rocks)\n\n1. Should flower collection have its own animation or sound cue? (Placeholder now.)\n2. Should we prevent flower placement on edge sand tiles of grass biome? (Currently yes‚Äî only on grass.)\n3. Should inventory differentiate categories visually? (Deferred.)\n\n---\n\nEnd of design.\n\n## 17. Current Test Coverage (Step 13)\n\nImplemented tests exercising core object lifecycle:\n\n1. `generation.test.ts` ‚Äì Base tile generation determinism (seed + coords).\n2. `biomes.test.ts` ‚Äì Deterministic biome assignment; desert palette validation.\n3. `object-generation.test.ts` ‚Äì Flower density bounds in grass biome; absence in desert & snow biomes.\n4. `object-persistence.test.ts` ‚Äì Removal excludes object from serialized diff and reload.\n5. `object-collection.test.ts` ‚Äì Simulated collection: inventory increment, object removal, persistence of absence.\n6. `persistence.test.ts` ‚Äì Tile diff serialization roundtrip.\n7. `dirty-flush.test.ts` / `metrics.test.ts` ‚Äì Performance & dirty flush instrumentation sanity.\n\nPending manual QA (Step 14): visual overlap, player movement during collection, multi-flower rapid collection, density tuning.\n\n## 18. Future Crafting Hook\n\nPlanned feature (see [CRAFTING.md](./CRAFTING.md)): Colored sand crafting using exactly one flower + up to 10 Yellow sand blocks producing a one-for-one number of tinted sand blocks (no multiplier). Will introduce:\n* Crafting modal (opened via minimal HUD option) listing available flower counts.\n* Deterministic recipe mapping (red: 50/50 split; others 100% single color; turquoise maps to cyan until a dark variant exists).\n* Atomic transaction: consumes inputs only if outputs fit in inventory; otherwise aborted.\n* Potential object metadata extension if certain flowers later grant special effects.\n\nImplementation deferred until after any additional QA & tuning; recipe data and execution flow defined in `CRAFTING.md`.\n\n## 19. QA & Tuning (Initial Metrics)\n\nPreliminary automated sampling (`density-sample.test.ts`) over 40 chunkX candidates at y=0 produced:\n\n```\nsampled grass chunks: 15\nmean flowers per grass chunk: ~6.87\nmin: 0\nmax: 32\nstd dev: ~10.73\n```\n\nInterpretation:\n* Actual mean significantly below naive expectation (~40‚Äì50) because many sampled chunks were small grass islands (high perimeter sand / water reducing grass tile count) and early sample size limited.\n* High variance (clusters up to 32) suggests occasional denser islands (acceptable for visual variety).\n* Some grass chunks had 0 flowers (allowed by stochastic placement; can consider guaranteed minimum later).\n\nNext QA Actions:\n1. Increase sample size (e.g., 200 chunks) to stabilize mean estimate.\n2. Record average grass tile count alongside flower count to compute ratio precisely.\n3. Decide on adjusting `FLOWER_DENSITY_DIVISOR` (currently 140). If target mean closer to 15‚Äì20 flowers per typical island, a divisor in the 60‚Äì90 range may be appropriate after refined measurement.\n4. Add optional minimum (e.g., ensure at least 1 flower if any grass > threshold).\n\nCurrent Decision: Keep divisor at 140 until larger sample collected; avoid premature tuning.\n\n### Extended Sampling (120 candidates, 37 grass chunks)\n\n```\nsampled grass chunks: 37\nmean flowers per grass chunk: ~6.38\nmean grass tiles per chunk: ~6706.59\nflowers per grass tile ratio: ~0.00095 (‚âà 1 / 1052)\nmin flowers: 0\nmax flowers: 32\nstd dev flowers: ~10.32\n```\n\nInterpretation:\n* Actual ratio (~1/1050) is much sparser than target design intent (~1/140) because grass tile heuristic counts entire predominant tile region (includes edge sand misclassification risk) and island generation yields large grass areas but low object probability.\n* To reach a target mean of ~15‚Äì20 flowers on these islands, adjust placement probability from 1/140 to roughly 1/450‚Äì1/330 (scales ratio up ~2‚Äì3x given current observed grass area; conservative starting point).\n* Recommended next tuning: set `FLOWER_DENSITY_DIVISOR` to 330, re-sample; if mean jumps near 20, optionally reduce slightly (e.g., 360‚Äì400). Provide guarantee of at least 1 flower on chunks with > 3000 grass tiles.\n\nPlanned Change (deferred until approval): Update constant and add minimum guarantee logic.","../../docs/COLLECTIBLES.md","f988c6c1904fd41f",{"html":334,"metadata":335},"\u003Ch2 id=\"collectible-objects-flowers--future-resources\">Collectible Objects (Flowers &#x26; Future Resources)\u003C/h2>\n\u003Ch3 id=\"status\">Status\u003C/h3>\n\u003Cp>In Progress ‚Äì Steps 1‚Äì12 implemented &#x26; tested (types, persistence, generation, rendering, object-first collection, HUD badge, density &#x26; biome tests, collection &#x26; persistence tests). This update adds cross-references to the colored sand crafting system. Remaining: Step 14 (manual QA &#x26; tuning), future crafting &#x26; enhancements.\u003C/p>\n\u003Cp>Quick Links: \u003Ca href=\"./CRAFTING.md\">Colored Sand Crafting System\u003C/a> ‚Äì see design &#x26; recipes.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"1-goals\">1. Goals\u003C/h2>\n\u003Col>\n\u003Cli>Procedurally distribute flower objects on grass-biome islands (per chunk).\u003C/li>\n\u003Cli>Player collection prioritizes an object (flower) over ground tile mutation when present.\u003C/li>\n\u003Cli>Collected flower:\n\u003Cul>\n\u003Cli>Added to inventory (stacking logic similar to blocks, but as a distinct item kind).\u003C/li>\n\u003Cli>Removed visually and from world state.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Flower presence / absence persists (survives reload) just like mutated tiles.\u003C/li>\n\u003Cli>Keep architecture forward-compatible for additional object types (rocks) and richer metadata (durability, growth, etc.).\u003C/li>\n\u003C/ol>\n\u003Cp>Non-goals (for this first pass): regrowth, tool requirements, animation, deterministic baseline diff compression (we store full object list initially), multi-layer pathfinding interactions.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"2-terminology\">2. Terminology\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Term\u003C/th>\u003Cth>Meaning\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Tile\u003C/td>\u003Ctd>Terrain base (numeric ID sourced from \u003Ccode>assets.blocks.sprites\u003C/code>).\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Object\u003C/td>\u003Ctd>A collectible entity placed ‚Äúon‚Äù a tile (flower, rock). Not encoded as tile ID.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Chunk\u003C/td>\u003Ctd>100√ó100 tile region (see \u003Ccode>CHUNK_TILES\u003C/code>). Owns tiles + objects.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Overlay Diff\u003C/td>\u003Ctd>Sparse tile mutations relative to baseline.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Chr>\n\u003Ch2 id=\"3-data-model-additions\">3. Data Model Additions\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Object identity (matches frame names in objects atlas)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> ObjectId\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'flower_red'\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'flower_cyan'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'flower_turquoise'\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'flower_blue'\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'flower_purple'\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'flower_pink'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // (rocks reserved for later)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> WorldObject\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ObjectId\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;          \u003C/span>\u003Cspan style=\"color:#6A737D\">// atlas frame key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  i\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;             \u003C/span>\u003Cspan style=\"color:#6A737D\">// linear tile index (tx + ty * CHUNK_TILES)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  sprite\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Phaser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">GameObjects\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// runtime only (not serialized)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> SerializedObjectEntry\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  i\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;  \u003C/span>\u003Cspan style=\"color:#6A737D\">// linear tile index\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  k\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ObjectId\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// kind / frame key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> SerializedChunk\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  objects\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#B392F0\"> SerializedObjectEntry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Optional full snapshot (first implementation)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Inventory\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> InventoryItem\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">kind\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'block'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Block\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">count\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  |\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#FFAB70\">kind\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'object'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">id\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ObjectId\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#FFAB70\">count\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Rationale: Keep initial persistence simple (complete object list) ‚Üí easier to reason about, small size (expected dozens max per chunk). Can evolve to diff-of-removals later if a deterministic baseline for objects is introduced.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"4-procedural-generation-flowers\">4. Procedural Generation (Flowers)\u003C/h2>\n\u003Cp>Generation occurs inside \u003Ccode>World.generateIsland()\u003C/code> (or a new helper invoked after tile generation) only if the biome kind is \u003Ccode>grass\u003C/code>.\u003C/p>\n\u003Cp>Algorithm:\u003C/p>\n\u003Col>\n\u003Cli>Inspect all tiles after base land generation.\u003C/li>\n\u003Cli>For each grass tile (not sand/water), with probability \u003Ccode>p = 1 / FLOWER_DENSITY_DIVISOR\u003C/code> attempt placement.\u003C/li>\n\u003Cli>Randomly choose a flower variant with uniform distribution across available frames.\u003C/li>\n\u003Cli>Ensure no duplicate object already at that index.\u003C/li>\n\u003Cli>Store as \u003Ccode>WorldObject\u003C/code> (create sprite) and append to internal object map.\u003C/li>\n\u003C/ol>\n\u003Cp>Constants (add to \u003Ccode>constants.ts\u003C/code> or a new config file):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> FLOWER_DENSITY_DIVISOR\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;  \u003C/span>\u003Cspan style=\"color:#6A737D\">// tuned from 140 (Step 14) to raise average flower count\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> OBJECT_DEPTH\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0.5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;            \u003C/span>\u003Cspan style=\"color:#6A737D\">// draw order (ground=0, objects=0.5, player=1, highlight=10)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Determinism: Use the existing per-chunk RNG (\u003Ccode>mulberry32(seed)\u003C/code>) so flower placement is predictable. Because we are \u003Cem>persisting\u003C/em> the full object list, determinism is nice but not strictly required for correctness now; it \u003Cem>will\u003C/em> matter if/when we switch to diff-of-removals.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"5-world-integration\">5. World Integration\u003C/h2>\n\u003Cp>Add to \u003Ccode>World\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">private \u003C/span>\u003Cspan style=\"color:#B392F0\">objects\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: Map\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">number, WorldObject\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">addObject\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(id: ObjectId, tx: number, ty: number): \u003C/span>\u003Cspan style=\"color:#F97583\">void\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">getObjectAt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(tx: number, ty: number): WorldObject \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">removeObjectAt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(tx: number, ty: number): boolean; \u003C/span>\u003Cspan style=\"color:#6A737D\">// returns true if removed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">serializeObjects\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(): SerializedObjectEntry[];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">applySerializedObjects\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(list: SerializedObjectEntry[]): \u003C/span>\u003Cspan style=\"color:#F97583\">void\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Rendering: Each object -> \u003Ccode>this.shell.add.image(offsetX + tx*TILE_SIZE + TILE_SIZE/2, offsetY + ty*TILE_SIZE + TILE_SIZE/2, assets.objects.key, id)\u003C/code> with \u003Ccode>setDepth(OBJECT_DEPTH)\u003C/code>. Destroy sprite when object removed or chunk destroyed.\u003C/p>\n\u003Cp>Persistence hooks:\u003C/p>\n\u003Cul>\n\u003Cli>Include \u003Ccode>objects\u003C/code> array inside \u003Ccode>serializeDiff\u003C/code> return value.\u003C/li>\n\u003Cli>In \u003Ccode>WorldManager.loadExisting\u003C/code>, after applying tile diff, if \u003Ccode>data.objects\u003C/code> present ‚Üí call \u003Ccode>applySerializedObjects\u003C/code>.\u003C/li>\n\u003Cli>Any add/remove triggers \u003Ccode>onMutate()\u003C/code> so chunk save scheduling includes object changes.\u003C/li>\n\u003C/ul>\n\u003Cp>Backward compatibility: Old saved chunks without \u003Ccode>objects\u003C/code> simply load with none (fine). New code must tolerate \u003Ccode>objects\u003C/code> missing.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"6-worldmanager-helpers\">6. WorldManager Helpers\u003C/h2>\n\u003Cp>Add convenience methods for global coordinates:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">getObjectAtGlobal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(tileX: number, tileY: number): WorldObject \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">removeObjectAtGlobal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(tileX: number, tileY: number): boolean;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>These mirror existing tile helpers and translate global tile coordinates to chunk-local indices.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"7-collection-flow-changes\">7. Collection Flow Changes\u003C/h2>\n\u003Cp>Amend \u003Ccode>CollectMode.finishCollection(tx, ty)\u003C/code> logic:\u003C/p>\n\u003Col>\n\u003Cli>Query \u003Ccode>worldManager.getObjectAtGlobal(tx, ty)\u003C/code>.\u003C/li>\n\u003Cli>If found:\n\u003Cul>\n\u003Cli>Attempt \u003Ccode>inventory.addObject(obj.id)\u003C/code>.\u003C/li>\n\u003Cli>If added, \u003Ccode>worldManager.removeObjectAtGlobal(tx, ty)\u003C/code> and HUD refresh.\u003C/li>\n\u003Cli>Return early (skip tile mutation logic).\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Else run existing tile collection logic (tile transforms + adding block to inventory).\u003C/li>\n\u003C/ol>\n\u003Cp>Collection time: unchanged (1s). Possible future variation per object.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"8-inventory--hud-adjustments\">8. Inventory &#x26; HUD Adjustments\u003C/h2>\n\u003Cp>Inventory changes:\u003C/p>\n\u003Cul>\n\u003Cli>Internally store entries as \u003Ccode>InventoryItem\u003C/code> union (already partially implemented).\u003C/li>\n\u003Cli>Expose existing block-centric APIs unchanged for now.\u003C/li>\n\u003Cli>Flowers (object items) are collected and stacked but are NOT rendered in the block HUD bar ‚Äì they remain hidden resources.\u003C/li>\n\u003C/ul>\n\u003Cp>HUD decision (updated):\u003C/p>\n\u003Cul>\n\u003Cli>Do not add flower icons to the primary block slot strip to avoid clutter.\u003C/li>\n\u003Cli>Future interaction: a crafting / combination UI (not yet implemented) will allow combining a flower with sand blocks to produce colored sand variants. This will consume one flower per batch (design TBD) and tint or swap sand block tiles.\u003C/li>\n\u003C/ul>\n\u003Cp>Backward compatibility: Since HUD ignores object entries, no immediate visual migration needed. Later, a secondary panel or context menu can expose flower counts when the combination feature is introduced.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"9-persistence-format-example\">9. Persistence Format Example\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsonc\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"version\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"worldSeed\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"local-seed\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"chunkX\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"chunkY\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"biomeId\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"grass\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"diff\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [ { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"i\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">5050\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"t\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">11\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"objects\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"i\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4321\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"k\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"flower_red\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"i\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">7890\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"k\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"flower_blue\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"lastTouched\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1730000000000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If \u003Ccode>objects\u003C/code> absent, treat as empty list.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"10-testing-strategy\">10. Testing Strategy\u003C/h2>\n\u003Cp>Unit / Integration tests (place in \u003Ccode>proc/\u003C/code> or new test file):\u003C/p>\n\u003Col>\n\u003Cli>Generation Density: For a grass biome chunk, count flowers; assert within expected bounds (e.g., 0 &#x3C; count &#x3C; CHUNK_TILES*CHUNK_TILES / FLOWER_DENSITY_DIVISOR * 2).\u003C/li>\n\u003Cli>Biome Restriction: Desert / snow biome chunks either produce zero flowers.\u003C/li>\n\u003Cli>Collection: Simulate adding a flower at tile, collect ‚Üí inventory increments, object removed, tile unchanged.\u003C/li>\n\u003Cli>Persistence: After removal, serialize + reload (apply diff &#x26; objects) ‚Üí ensure flower not present.\u003C/li>\n\u003Cli>Backward Compatibility: Loading a serialized chunk without \u003Ccode>objects\u003C/code> does not throw.\u003C/li>\n\u003C/ol>\n\u003Cp>Edge cases (manual QA):\u003C/p>\n\u003Cul>\n\u003Cli>Collect while moving across chunk boundary.\u003C/li>\n\u003Cli>Collecting multiple flowers quickly (inventory stacking works, no duplicates remain in world).\u003C/li>\n\u003Cli>Saving &#x26; reloading with mixed tile mutations and object removals.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"11-performance-considerations\">11. Performance Considerations\u003C/h2>\n\u003Cul>\n\u003Cli>Expected flower count per chunk is small (&#x3C; ~80 @ current density). Full list serialization negligible.\u003C/li>\n\u003Cli>Object lookups use a \u003Ccode>Map&#x3C;number,WorldObject>\u003C/code> O(1).\u003C/li>\n\u003Cli>Save size overhead: each object entry ~ (index + small string) ‚Äì acceptable; could compress later.\u003C/li>\n\u003Cli>Future optimization: store baseline deterministic placement and only track removals to reduce I/O.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"12-future-enhancements-not-in-first-pass\">12. Future Enhancements (Not in First Pass)\u003C/h2>\n\u003Cul>\n\u003Cli>Rocks with longer collection times or tool gating.\u003C/li>\n\u003Cli>Object-specific animations / particle effects on collection.\u003C/li>\n\u003Cli>Regrowth timers or seasonal generation refresh.\u003C/li>\n\u003Cli>Deterministic baseline + diff-of-removals for compact saves.\u003C/li>\n\u003Cli>Object metadata (durability, growth s\u003C/li>\n\u003Cli>tage) via \u003Ccode>SerializedTileMetaEntry\u003C/code> or a parallel \u003Ccode>objectsMeta\u003C/code> extension.\u003C/li>\n\u003Cli>Pathfinding collision if certain objects become blocking.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"13-implementation-checklist\">13. Implementation Checklist\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>1. [x] Extend types: ObjectId, InventoryItem, SerializedObjectEntry\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>2. [x] Update IChunkStore interfaces &#x26; version note (optional objects[] field)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3. [x] Add object container &#x26; API to World (add/get/remove, serialize/apply)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>4. [x] Procedural flower generation (grass biome only) with density constant\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>5. [x] Rendering for objects (depth ordering) &#x26; cleanup on destroy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6. [x] WorldManager global helpers (get/remove object at global coords)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>7. [x] Modify CollectMode to prioritize object collection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>8. [x] Refactor Inventory for union item kind (block/object) &#x26; stacking rules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>9. [x] Minimal HUD integration (aggregate flower count badge on collect icon; full crafting UI deferred)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>10. [x] Persistence wiring (save &#x26; load objects field) ‚Äì verify saves include removals\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>11. [x] Tests: generation density + biome restriction\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>12. [x] Tests: collection flow &#x26; persistence\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>13. [x] Documentation updates (this file ‚Äì keep in sync if design shifts)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>14. [ ] Manual QA &#x26; tuning (flower density, visual overlap)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"14-risks--mitigations\">14. Risks &#x26; Mitigations\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Risk\u003C/th>\u003Cth>Mitigation\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Inventory / HUD break due to new union type\u003C/td>\u003Ctd>Introduce adapters; keep old code paths until fully migrated.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Save incompatibility\u003C/td>\u003Ctd>Optional \u003Ccode>objects\u003C/code> field guarded by presence checks.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Visual clutter / performance with too many objects\u003C/td>\u003Ctd>Density constant tweak; future culling if needed.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Hidden resource confusion (flowers not visible in HUD)\u003C/td>\u003Ctd>Add future crafting/combo panel listing flower counts.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Future diff optimization complexity\u003C/td>\u003Ctd>Keep simple full snapshot now; encapsulate serialization for easy swap later.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Chr>\n\u003Ch2 id=\"15-quick-reference-dev-cheatsheet\">15. Quick Reference (Dev Cheatsheet)\u003C/h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Concern\u003C/th>\u003Cth>Location / Action\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Add new object kind\u003C/td>\u003Ctd>Append frame to objects atlas + extend \u003Ccode>ObjectId\u003C/code> union.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Force re-gen (dev)\u003C/td>\u003Ctd>Clear IndexedDB chunk keys or change world seed.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Adjust density\u003C/td>\u003Ctd>\u003Ccode>FLOWER_DENSITY_DIVISOR\u003C/code> constant.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Rendering order\u003C/td>\u003Ctd>\u003Ccode>OBJECT_DEPTH\u003C/code> constant (objects 0.5 &#x3C; player 1).\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Chr>\n\u003Ch2 id=\"16-open-questions-track--resolve-before-expanding-to-rocks\">16. Open Questions (Track &#x26; Resolve Before Expanding to Rocks)\u003C/h2>\n\u003Col>\n\u003Cli>Should flower collection have its own animation or sound cue? (Placeholder now.)\u003C/li>\n\u003Cli>Should we prevent flower placement on edge sand tiles of grass biome? (Currently yes‚Äî only on grass.)\u003C/li>\n\u003Cli>Should inventory differentiate categories visually? (Deferred.)\u003C/li>\n\u003C/ol>\n\u003Chr>\n\u003Cp>End of design.\u003C/p>\n\u003Ch2 id=\"17-current-test-coverage-step-13\">17. Current Test Coverage (Step 13)\u003C/h2>\n\u003Cp>Implemented tests exercising core object lifecycle:\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode>generation.test.ts\u003C/code> ‚Äì Base tile generation determinism (seed + coords).\u003C/li>\n\u003Cli>\u003Ccode>biomes.test.ts\u003C/code> ‚Äì Deterministic biome assignment; desert palette validation.\u003C/li>\n\u003Cli>\u003Ccode>object-generation.test.ts\u003C/code> ‚Äì Flower density bounds in grass biome; absence in desert &#x26; snow biomes.\u003C/li>\n\u003Cli>\u003Ccode>object-persistence.test.ts\u003C/code> ‚Äì Removal excludes object from serialized diff and reload.\u003C/li>\n\u003Cli>\u003Ccode>object-collection.test.ts\u003C/code> ‚Äì Simulated collection: inventory increment, object removal, persistence of absence.\u003C/li>\n\u003Cli>\u003Ccode>persistence.test.ts\u003C/code> ‚Äì Tile diff serialization roundtrip.\u003C/li>\n\u003Cli>\u003Ccode>dirty-flush.test.ts\u003C/code> / \u003Ccode>metrics.test.ts\u003C/code> ‚Äì Performance &#x26; dirty flush instrumentation sanity.\u003C/li>\n\u003C/ol>\n\u003Cp>Pending manual QA (Step 14): visual overlap, player movement during collection, multi-flower rapid collection, density tuning.\u003C/p>\n\u003Ch2 id=\"18-future-crafting-hook\">18. Future Crafting Hook\u003C/h2>\n\u003Cp>Planned feature (see \u003Ca href=\"./CRAFTING.md\">CRAFTING.md\u003C/a>): Colored sand crafting using exactly one flower + up to 10 Yellow sand blocks producing a one-for-one number of tinted sand blocks (no multiplier). Will introduce:\u003C/p>\n\u003Cul>\n\u003Cli>Crafting modal (opened via minimal HUD option) listing available flower counts.\u003C/li>\n\u003Cli>Deterministic recipe mapping (red: 50/50 split; others 100% single color; turquoise maps to cyan until a dark variant exists).\u003C/li>\n\u003Cli>Atomic transaction: consumes inputs only if outputs fit in inventory; otherwise aborted.\u003C/li>\n\u003Cli>Potential object metadata extension if certain flowers later grant special effects.\u003C/li>\n\u003C/ul>\n\u003Cp>Implementation deferred until after any additional QA &#x26; tuning; recipe data and execution flow defined in \u003Ccode>CRAFTING.md\u003C/code>.\u003C/p>\n\u003Ch2 id=\"19-qa--tuning-initial-metrics\">19. QA &#x26; Tuning (Initial Metrics)\u003C/h2>\n\u003Cp>Preliminary automated sampling (\u003Ccode>density-sample.test.ts\u003C/code>) over 40 chunkX candidates at y=0 produced:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>sampled grass chunks: 15\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>mean flowers per grass chunk: ~6.87\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>min: 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>max: 32\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>std dev: ~10.73\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Interpretation:\u003C/p>\n\u003Cul>\n\u003Cli>Actual mean significantly below naive expectation (~40‚Äì50) because many sampled chunks were small grass islands (high perimeter sand / water reducing grass tile count) and early sample size limited.\u003C/li>\n\u003Cli>High variance (clusters up to 32) suggests occasional denser islands (acceptable for visual variety).\u003C/li>\n\u003Cli>Some grass chunks had 0 flowers (allowed by stochastic placement; can consider guaranteed minimum later).\u003C/li>\n\u003C/ul>\n\u003Cp>Next QA Actions:\u003C/p>\n\u003Col>\n\u003Cli>Increase sample size (e.g., 200 chunks) to stabilize mean estimate.\u003C/li>\n\u003Cli>Record average grass tile count alongside flower count to compute ratio precisely.\u003C/li>\n\u003Cli>Decide on adjusting \u003Ccode>FLOWER_DENSITY_DIVISOR\u003C/code> (currently 140). If target mean closer to 15‚Äì20 flowers per typical island, a divisor in the 60‚Äì90 range may be appropriate after refined measurement.\u003C/li>\n\u003Cli>Add optional minimum (e.g., ensure at least 1 flower if any grass > threshold).\u003C/li>\n\u003C/ol>\n\u003Cp>Current Decision: Keep divisor at 140 until larger sample collected; avoid premature tuning.\u003C/p>\n\u003Ch3 id=\"extended-sampling-120-candidates-37-grass-chunks\">Extended Sampling (120 candidates, 37 grass chunks)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>sampled grass chunks: 37\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>mean flowers per grass chunk: ~6.38\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>mean grass tiles per chunk: ~6706.59\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>flowers per grass tile ratio: ~0.00095 (‚âà 1 / 1052)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>min flowers: 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>max flowers: 32\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>std dev flowers: ~10.32\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Interpretation:\u003C/p>\n\u003Cul>\n\u003Cli>Actual ratio (~1/1050) is much sparser than target design intent (~1/140) because grass tile heuristic counts entire predominant tile region (includes edge sand misclassification risk) and island generation yields large grass areas but low object probability.\u003C/li>\n\u003Cli>To reach a target mean of ~15‚Äì20 flowers on these islands, adjust placement probability from 1/140 to roughly 1/450‚Äì1/330 (scales ratio up ~2‚Äì3x given current observed grass area; conservative starting point).\u003C/li>\n\u003Cli>Recommended next tuning: set \u003Ccode>FLOWER_DENSITY_DIVISOR\u003C/code> to 330, re-sample; if mean jumps near 20, optionally reduce slightly (e.g., 360‚Äì400). Provide guarantee of at least 1 flower on chunks with > 3000 grass tiles.\u003C/li>\n\u003C/ul>\n\u003Cp>Planned Change (deferred until approval): Update constant and add minimum guarantee logic.\u003C/p>",{"headings":336,"localImagePaths":395,"remoteImagePaths":396,"frontmatter":397,"imagePaths":398},[337,340,341,342,343,346,349,352,355,358,361,364,367,370,373,374,377,380,383,386,389,392],{"depth":32,"slug":338,"text":339},"collectible-objects-flowers--future-resources","Collectible Objects (Flowers & Future Resources)",{"depth":45,"slug":279,"text":280},{"depth":32,"slug":282,"text":283},{"depth":32,"slug":285,"text":286},{"depth":32,"slug":344,"text":345},"3-data-model-additions","3. Data Model Additions",{"depth":32,"slug":347,"text":348},"4-procedural-generation-flowers","4. Procedural Generation (Flowers)",{"depth":32,"slug":350,"text":351},"5-world-integration","5. World Integration",{"depth":32,"slug":353,"text":354},"6-worldmanager-helpers","6. WorldManager Helpers",{"depth":32,"slug":356,"text":357},"7-collection-flow-changes","7. Collection Flow Changes",{"depth":32,"slug":359,"text":360},"8-inventory--hud-adjustments","8. Inventory & HUD Adjustments",{"depth":32,"slug":362,"text":363},"9-persistence-format-example","9. Persistence Format Example",{"depth":32,"slug":365,"text":366},"10-testing-strategy","10. Testing Strategy",{"depth":32,"slug":368,"text":369},"11-performance-considerations","11. Performance Considerations",{"depth":32,"slug":371,"text":372},"12-future-enhancements-not-in-first-pass","12. Future Enhancements (Not in First Pass)",{"depth":32,"slug":318,"text":319},{"depth":32,"slug":375,"text":376},"14-risks--mitigations","14. Risks & Mitigations",{"depth":32,"slug":378,"text":379},"15-quick-reference-dev-cheatsheet","15. Quick Reference (Dev Cheatsheet)",{"depth":32,"slug":381,"text":382},"16-open-questions-track--resolve-before-expanding-to-rocks","16. Open Questions (Track & Resolve Before Expanding to Rocks)",{"depth":32,"slug":384,"text":385},"17-current-test-coverage-step-13","17. Current Test Coverage (Step 13)",{"depth":32,"slug":387,"text":388},"18-future-crafting-hook","18. Future Crafting Hook",{"depth":32,"slug":390,"text":391},"19-qa--tuning-initial-metrics","19. QA & Tuning (Initial Metrics)",{"depth":45,"slug":393,"text":394},"extended-sampling-120-candidates-37-grass-chunks","Extended Sampling (120 candidates, 37 grass chunks)",[],[],{},[],"readme",{"id":399,"data":401,"body":402,"filePath":403,"assetImports":404,"digest":408,"rendered":409},{},"# Birthday Detective Game\n\nThe game can be played by visiting https://game.amelie.belgar.eu/bd-25/, or by scanning this QR code.\n\n![QR Code](images/qr-code.svg)\n\nThis repository contains a simple top-down game, inspired by Minecraft, being developed for Amelie's 7th birthday.\n\n## Project Details\n\n- **Goal:** Create a fun, exploration-based game playable in a web browser. It should represent some of the core elements of Minecraft, while being much simpler and allowing to \"draw\" pictures with the colored blocks.\n- **Style:** Top-down perspective with tile-based maps and sprite characters, inspired by classic exploration games.\n\n## Documentation\n\nDetailed planning documents can be found in the `/docs` directory.\n\n## Core Development Steps\n\n### 1. Use VSCode, Copilot with GPT-4.1, GPT-5 and Sonnet 4.5 to drive the game development\n\nExploring vibe coding capabilities of these models was one of the goals of this project. It has worked quite well at times and not at all at others. In general:\n\n- The more the AI iterated over the xisting code base, the messier it got.\n- At times it was challenging to catch up on the AI created code, because it's just too easy to not review the AI made changes detailed enough.\n\n### 2. Use Copilot to create a game icon\n\n![Source images and prompt](images/app_icon_generation_prompt.png)\n\nCopilot was very successful in creating a Minecraft-like picture based on one of Amelie's photos.\n\n![Result](../apps/amelcraft/assets/manifest/icons/icon-256x256.png)\n\n### 3. Turning it into a PWA\n\nUsing the either of the following two, free online apps to generate icons from a source image and manifest metadata, to turn the web app into a PWA.\n\n- https://pwa-icon-generator.vercel.app/\n- https://realfavicongenerator.net/","../../docs/README.md",[405,406,407],"images/qr-code.svg","images/app_icon_generation_prompt.png","../apps/amelcraft/assets/manifest/icons/icon-256x256.png","c786561aa12281a5",{"html":410,"metadata":411},"\u003Ch1 id=\"birthday-detective-game\">Birthday Detective Game\u003C/h1>\n\u003Cp>The game can be played by visiting \u003Ca href=\"https://game.amelie.belgar.eu/bd-25/\">https://game.amelie.belgar.eu/bd-25/\u003C/a>, or by scanning this QR code.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;images/qr-code.svg&#x22;,&#x22;alt&#x22;:&#x22;QR Code&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>This repository contains a simple top-down game, inspired by Minecraft, being developed for Amelie‚Äôs 7th birthday.\u003C/p>\n\u003Ch2 id=\"project-details\">Project Details\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Goal:\u003C/strong> Create a fun, exploration-based game playable in a web browser. It should represent some of the core elements of Minecraft, while being much simpler and allowing to ‚Äúdraw‚Äù pictures with the colored blocks.\u003C/li>\n\u003Cli>\u003Cstrong>Style:\u003C/strong> Top-down perspective with tile-based maps and sprite characters, inspired by classic exploration games.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"documentation\">Documentation\u003C/h2>\n\u003Cp>Detailed planning documents can be found in the \u003Ccode>/docs\u003C/code> directory.\u003C/p>\n\u003Ch2 id=\"core-development-steps\">Core Development Steps\u003C/h2>\n\u003Ch3 id=\"1-use-vscode-copilot-with-gpt-41-gpt-5-and-sonnet-45-to-drive-the-game-development\">1. Use VSCode, Copilot with GPT-4.1, GPT-5 and Sonnet 4.5 to drive the game development\u003C/h3>\n\u003Cp>Exploring vibe coding capabilities of these models was one of the goals of this project. It has worked quite well at times and not at all at others. In general:\u003C/p>\n\u003Cul>\n\u003Cli>The more the AI iterated over the xisting code base, the messier it got.\u003C/li>\n\u003Cli>At times it was challenging to catch up on the AI created code, because it‚Äôs just too easy to not review the AI made changes detailed enough.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2-use-copilot-to-create-a-game-icon\">2. Use Copilot to create a game icon\u003C/h3>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;images/app_icon_generation_prompt.png&#x22;,&#x22;alt&#x22;:&#x22;Source images and prompt&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Copilot was very successful in creating a Minecraft-like picture based on one of Amelie‚Äôs photos.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../apps/amelcraft/assets/manifest/icons/icon-256x256.png&#x22;,&#x22;alt&#x22;:&#x22;Result&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch3 id=\"3-turning-it-into-a-pwa\">3. Turning it into a PWA\u003C/h3>\n\u003Cp>Using the either of the following two, free online apps to generate icons from a source image and manifest metadata, to turn the web app into a PWA.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://pwa-icon-generator.vercel.app/\">https://pwa-icon-generator.vercel.app/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://realfavicongenerator.net/\">https://realfavicongenerator.net/\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":412,"localImagePaths":434,"remoteImagePaths":435,"frontmatter":436,"imagePaths":437},[413,416,419,422,425,428,431],{"depth":29,"slug":414,"text":415},"birthday-detective-game","Birthday Detective Game",{"depth":32,"slug":417,"text":418},"project-details","Project Details",{"depth":32,"slug":420,"text":421},"documentation","Documentation",{"depth":32,"slug":423,"text":424},"core-development-steps","Core Development Steps",{"depth":45,"slug":426,"text":427},"1-use-vscode-copilot-with-gpt-41-gpt-5-and-sonnet-45-to-drive-the-game-development","1. Use VSCode, Copilot with GPT-4.1, GPT-5 and Sonnet 4.5 to drive the game development",{"depth":45,"slug":429,"text":430},"2-use-copilot-to-create-a-game-icon","2. Use Copilot to create a game icon",{"depth":45,"slug":432,"text":433},"3-turning-it-into-a-pwa","3. Turning it into a PWA",[405,406,407],[],{},[405,406,407]]